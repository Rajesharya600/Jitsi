{"version":3,"sources":["webpack://JitsiMeetExternalAPI/webpack/universalModuleDefinition","webpack://JitsiMeetExternalAPI/webpack/bootstrap","webpack://JitsiMeetExternalAPI/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetExternalAPI/./react/features/base/util/uri.js","webpack://JitsiMeetExternalAPI/./modules/API/constants.js","webpack://JitsiMeetExternalAPI/./react/features/base/config/parseURLParams.js","webpack://JitsiMeetExternalAPI/./modules/transport/PostMessageTransportBackend.js","webpack://JitsiMeetExternalAPI/./modules/transport/Transport.js","webpack://JitsiMeetExternalAPI/./modules/transport/constants.js","webpack://JitsiMeetExternalAPI/./modules/transport/index.js","webpack://JitsiMeetExternalAPI/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetExternalAPI/./react/features/base/util/helpers.js","webpack://JitsiMeetExternalAPI/./react/features/base/util/httpUtils.js","webpack://JitsiMeetExternalAPI/./node_modules/events/events.js","webpack://JitsiMeetExternalAPI/./node_modules/postis/src/index.js","webpack://JitsiMeetExternalAPI/./modules/API/external/index.js","webpack://JitsiMeetExternalAPI/./modules/API/external/external_api.js","webpack://JitsiMeetExternalAPI/./node_modules/jitsi-meet-logger/lib/LogCollector.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","getLogger","id","transports","format","logger","push","setLogLevelById","level","length","setLevel","setLogLevel","require","__filename","APP_LINK_SCHEME","_URI_AUTHORITY_PATTERN","_URI_PATH_PATTERN","URI_PROTOCOL_PATTERN","_fixURIStringScheme","uri","regex","RegExp","concat","match","exec","protocol","toLowerCase","substring","lastIndex","startsWith","_objectToURLParamsArray","obj","arguments","undefined","params","encodeURIComponent","JSON","stringify","e","warn","parseStandardURIString","str","pathname","toString","_standardURIToString","replace","authority","userinfoEndIndex","indexOf","host","portBeginIndex","lastIndexOf","port","hostname","hashBeginIndex","search","hash","thiz","_ref2","this","urlObjectToString","url","scheme","endsWith","domain","_parseStandardURIStri","contextRoot","room","roomName","jwt","_arr","_i","configName","urlParamsArray","urlParamsString","join","API_ID","dontParse","paramStr","substr","split","forEach","part","param","parse","decodeURIComponent","reportError","String","parseURLParams","location","jitsi_meet_external_api_id","DEFAULT_POSTIS_OPTIONS","opener","parent","LEGACY_INCOMING_METHODS","LEGACY_OUTGOING_METHODS","POSTIS_METHOD_NAME","PostMessageTransportBackend","_this","_ref","enableLegacyFormat","postisOptions","_classCallCheck","postis","Postis","_objectSpread","_enableLegacyFormat","method","listen","_legacyMessageReceivedCallback","_receiveCallback","message","data","_objectWithoutProperties","send","destroy","_sendLegacyMessage","callback","Transport","backend","Transport_classCallCheck","_listeners","Map","_requestID","_responseHandlers","_unprocessedMessages","Set","addListener","on","setBackend","_backend","dispose","type","handler","delete","emit","result","error","clear","removeAllListeners","_disposeBackend","eventName","_len","args","Array","_key","listenersForEvent","isProcessed","size","listener","apply","add","_this2","set","_toConsumableArray","event","request","_this3","Promise","reject","Error","resolve","setReceiveCallback","_onMessageReceived","__webpack_exports__","PostMessageTransportBackend_PostMessageTransportBackend","Transport_Transport","scope","getJitsiMeetGlobalNS","setExternalTransportBackend","externalTransportBackend","trace","debug","info","log","consoleTransport","console","globalTransports","slice","callerInfo","methodName","fileLocation","line","column","stack","getCallerInfo","methods","keys","transportIdx","splice","DEBUG","INFO","LOG","WARN","ERROR","JitsiMeetJS","app","msg","onerror","EventEmitter","_events","_maxListeners","isFunction","arg","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","TypeError","er","len","listeners","err","context","newListener","warned","once","fired","g","removeListener","list","position","listenerCount","evlistener","emitter","options","readynessCheck","targetWindow","windowForEventListening","sendBuffer","listenBuffer","ready","listenersForMethod","addEventListener","listenBufferForMethod","j","opts","postMessage","setTimeout","clearInterval","removeEventListener","readyCheckID","Date","Math","random","setInterval","default","ALWAYS_ON_TOP_FILENAMES","commands","avatarUrl","displayName","email","hangup","submitFeedback","toggleAudio","toggleChat","toggleFilmStrip","toggleShareScreen","toggleVideo","events","avatar-changed","audio-availability-changed","audio-mute-status-changed","display-name-change","email-change","feedback-submitted","incoming-message","outgoing-message","participant-joined","participant-left","video-ready-to-close","video-conference-joined","video-conference-left","video-availability-changed","video-mute-status-changed","screen-sharing-status-changed","changeParticipantNumber","APIInstance","number","_numberOfParticipants","generateURL","noSSL","parseSizeParam","parsedValue","JitsiMeetExternalAPI","_possibleConstructorReturn","_getPrototypeOf","_parseArguments","_typeof","_args","_slicedToArray","width","height","parentNode","configOverwrite","interfaceConfigOverwrite","onload","parseArguments","_parseArguments$roomN","_parseArguments$width","_parseArguments$heigh","_parseArguments$paren","document","body","_parseArguments$confi","_parseArguments$inter","_parseArguments$noSSL","_parseArguments$jwt","_parseArguments$onloa","invitees","_parentNode","_url","_createIFrame","_transport","_frame","contentWindow","isArray","invite","_isLargeVideoVisible","_participants","_myUserID","_onStageParticipant","_setupListeners","frameName","createElement","allow","src","_setSize","setAttribute","style","border","appendChild","iframeWindow","iframeDocument","baseURL","base","querySelector","href","_iframeWindow$locatio","map","filename","URL","iframe","getIFrame","getElementById","parsedHeight","parsedWidth","userID","avatarURL","formattedDisplayName","user","displayname","isVisible","removeChild","_len2","_key2","sendEvent","commandList","executeCommand","sendRequest","participantId","eventList","electronPopupsConfig","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","someObject","formatLogMessage","prevMessage","text","count","_flush","start","_reschedulePublishInterval","clearTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop"],"mappings":"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","file":"external_api.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","// @flow\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The app linking scheme.\n * TODO: This should be read from the manifest files later.\n */\nexport const APP_LINK_SCHEME = 'org.jitsi.meet:';\n\n/**\n * A list of characters to be excluded/removed from the room component/segment\n * of a conference/meeting URI/URL. The list is based on RFC 3986 and the jxmpp\n * library utilized by jicofo.\n */\nconst _ROOM_EXCLUDE_PATTERN = '[\\\\:\\\\?#\\\\[\\\\]@!$&\\'()*+,;=></\"]';\n\n/**\n * The {@link RegExp} pattern of the authority of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_AUTHORITY_PATTERN = '(//[^/?#]+)';\n\n/**\n * The {@link RegExp} pattern of the path of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_PATH_PATTERN = '([^?#]*)';\n\n/**\n * The {@link RegExp} pattern of the protocol of a URI.\n *\n * FIXME: The URL class exposed by JavaScript will not include the colon in\n * the protocol field. Also in other places (at the time of this writing:\n * the DeepLinkingMobilePage.js) the APP_LINK_SCHEME does not include\n * the double dots, so things are inconsistent.\n *\n * @type {string}\n */\nexport const URI_PROTOCOL_PATTERN = '([a-z][a-z0-9\\\\.\\\\+-]*:)';\n\n/**\n * Excludes/removes certain characters from a specific room (name) which are\n * incompatible with Jitsi Meet on the client and/or server sides.\n *\n * @param {?string} room - The room (name) to fix.\n * @private\n * @returns {?string}\n */\nfunction _fixRoom(room: ?string) {\n    return room\n        ? room.replace(new RegExp(_ROOM_EXCLUDE_PATTERN, 'g'), '')\n        : room;\n}\n\n/**\n * Fixes the scheme part of a specific URI (string) so that it contains a\n * well-known scheme such as HTTP(S). For example, the mobile app implements an\n * app-specific URI scheme in addition to Universal Links. The app-specific\n * scheme may precede or replace the well-known scheme. In such a case, dealing\n * with the app-specific scheme only complicates the logic and it is simpler to\n * get rid of it (by translating the app-specific scheme into a well-known\n * scheme).\n *\n * @param {string} uri - The URI (string) to fix the scheme of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringScheme(uri: string) {\n    const regex = new RegExp(`^${URI_PROTOCOL_PATTERN}+`, 'gi');\n    const match: Array<string> | null = regex.exec(uri);\n\n    if (match) {\n        // As an implementation convenience, pick up the last scheme and make\n        // sure that it is a well-known one.\n        let protocol = match[match.length - 1].toLowerCase();\n\n        if (protocol !== 'http:' && protocol !== 'https:') {\n            protocol = 'https:';\n        }\n\n        /* eslint-disable no-param-reassign */\n\n        uri = uri.substring(regex.lastIndex);\n        if (uri.startsWith('//')) {\n            // The specified URL was not a room name only, it contained an\n            // authority.\n            uri = protocol + uri;\n        }\n\n        /* eslint-enable no-param-reassign */\n    }\n\n    return uri;\n}\n\n/**\n * Gets the (Web application) context root defined by a specific location (URI).\n *\n * @param {Object} location - The location (URI) which defines the (Web\n * application) context root.\n * @public\n * @returns {string} - The (Web application) context root defined by the\n * specified {@code location} (URI).\n */\nexport function getLocationContextRoot({ pathname }: { pathname: string }) {\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n\n    return (\n        contextRootEndIndex === -1\n            ? '/'\n            : pathname.substring(0, contextRootEndIndex + 1));\n}\n\n/**\n * Constructs a new {@code Array} with URL parameter {@code String}s out of a\n * specific {@code Object}.\n *\n * @param {Object} obj - The {@code Object} to turn into URL parameter\n * {@code String}s.\n * @returns {Array<string>} The {@code Array} with URL parameter {@code String}s\n * constructed out of the specified {@code obj}.\n */\nfunction _objectToURLParamsArray(obj = {}) {\n    const params = [];\n\n    for (const key in obj) { // eslint-disable-line guard-for-in\n        try {\n            params.push(\n                `${key}=${encodeURIComponent(JSON.stringify(obj[key]))}`);\n        } catch (e) {\n            logger.warn(`Error encoding ${key}: ${e}`);\n        }\n    }\n\n    return params;\n}\n\n/**\n * Parses a specific URI string into an object with the well-known properties of\n * the {@link Location} and/or {@link URL} interfaces implemented by Web\n * browsers. The parsing attempts to be in accord with IETF's RFC 3986.\n *\n * @param {string} str - The URI string to parse.\n * @public\n * @returns {{\n *     hash: string,\n *     host: (string|undefined),\n *     hostname: (string|undefined),\n *     pathname: string,\n *     port: (string|undefined),\n *     protocol: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseStandardURIString(str: string) {\n    /* eslint-disable no-param-reassign */\n\n    const obj: Object = {\n        toString: _standardURIToString\n    };\n\n    let regex;\n    let match: Array<string> | null;\n\n    // XXX A URI string as defined by RFC 3986 does not contain any whitespace.\n    // Usually, a browser will have already encoded any whitespace. In order to\n    // avoid potential later problems related to whitespace in URI, strip any\n    // whitespace. Anyway, the Jitsi Meet app is not known to utilize unencoded\n    // whitespace so the stripping is deemed safe.\n    str = str.replace(/\\s/g, '');\n\n    // protocol\n    regex = new RegExp(`^${URI_PROTOCOL_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        obj.protocol = match[1].toLowerCase();\n        str = str.substring(regex.lastIndex);\n    }\n\n    // authority\n    regex = new RegExp(`^${_URI_AUTHORITY_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        let authority: string = match[1].substring(/* // */ 2);\n\n        str = str.substring(regex.lastIndex);\n\n        // userinfo\n        const userinfoEndIndex = authority.indexOf('@');\n\n        if (userinfoEndIndex !== -1) {\n            authority = authority.substring(userinfoEndIndex + 1);\n        }\n\n        obj.host = authority;\n\n        // port\n        const portBeginIndex = authority.lastIndexOf(':');\n\n        if (portBeginIndex !== -1) {\n            obj.port = authority.substring(portBeginIndex + 1);\n            authority = authority.substring(0, portBeginIndex);\n        }\n\n        // hostname\n        obj.hostname = authority;\n    }\n\n    // pathname\n    regex = new RegExp(`^${_URI_PATH_PATTERN}`, 'gi');\n    match = regex.exec(str);\n\n    let pathname: ?string;\n\n    if (match) {\n        pathname = match[1];\n        str = str.substring(regex.lastIndex);\n    }\n    if (pathname) {\n        pathname.startsWith('/') || (pathname = `/${pathname}`);\n    } else {\n        pathname = '/';\n    }\n    obj.pathname = pathname;\n\n    // query\n    if (str.startsWith('?')) {\n        let hashBeginIndex = str.indexOf('#', 1);\n\n        if (hashBeginIndex === -1) {\n            hashBeginIndex = str.length;\n        }\n        obj.search = str.substring(0, hashBeginIndex);\n        str = str.substring(hashBeginIndex);\n    } else {\n        obj.search = ''; // Google Chrome\n    }\n\n    // fragment\n    obj.hash = str.startsWith('#') ? str : '';\n\n    /* eslint-enable no-param-reassign */\n\n    return obj;\n}\n\n/**\n * Parses a specific URI which (supposedly) references a Jitsi Meet resource\n * (location).\n *\n * @param {(string|undefined)} uri - The URI to parse which (supposedly)\n * references a Jitsi Meet resource (location).\n * @public\n * @returns {{\n *     contextRoot: string,\n *     hash: string,\n *     host: string,\n *     hostname: string,\n *     pathname: string,\n *     port: string,\n *     protocol: string,\n *     room: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseURIString(uri: ?string) {\n    if (typeof uri !== 'string') {\n        return undefined;\n    }\n\n    const obj = parseStandardURIString(_fixURIStringScheme(uri));\n\n    // Add the properties that are specific to a Jitsi Meet resource (location)\n    // such as contextRoot, room:\n\n    // contextRoot\n    obj.contextRoot = getLocationContextRoot(obj);\n\n    // The room (name) is the last component/segment of pathname.\n    const { pathname } = obj;\n\n    // XXX While the components/segments of pathname are URI encoded, Jitsi Meet\n    // on the client and/or server sides still don't support certain characters.\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n    let room = pathname.substring(contextRootEndIndex + 1) || undefined;\n\n    if (room) {\n        const fixedRoom = _fixRoom(room);\n\n        if (fixedRoom !== room) {\n            room = fixedRoom;\n\n            // XXX Drive fixedRoom into pathname (because room is derived from\n            // pathname).\n            obj.pathname\n                = pathname.substring(0, contextRootEndIndex + 1) + (room || '');\n        }\n    }\n    obj.room = room;\n\n    return obj;\n}\n\n/**\n * Implements {@code href} and {@code toString} for the {@code Object} returned\n * by {@link #parseStandardURIString}.\n *\n * @param {Object} [thiz] - An {@code Object} returned by\n * {@code #parseStandardURIString} if any; otherwise, it is presumed that the\n * function is invoked on such an instance.\n * @returns {string}\n */\nfunction _standardURIToString(thiz: ?Object) {\n    // eslint-disable-next-line no-invalid-this\n    const { hash, host, pathname, protocol, search } = thiz || this;\n    let str = '';\n\n    protocol && (str += protocol);\n\n    // TODO userinfo\n\n    host && (str += `//${host}`);\n    str += pathname || '/';\n    search && (str += search);\n    hash && (str += hash);\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} which is supposed to represent a URL. Obviously, if a\n * {@code String} is specified, it is returned. If a {@code URL} is specified,\n * its {@code URL#href} is returned. Additionally, an {@code Object} similar to\n * the one accepted by the constructor of Web's ExternalAPI is supported on both\n * mobile/React Native and Web/React.\n *\n * @param {Object|string} obj - The URL to return a {@code String}\n * representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code obj} which is supposed to represent a URL.\n */\nexport function toURLString(obj: ?(Object | string)): ?string {\n    let str;\n\n    switch (typeof obj) {\n    case 'object':\n        if (obj) {\n            if (obj instanceof URL) {\n                str = obj.href;\n            } else {\n                str = urlObjectToString(obj);\n            }\n        }\n        break;\n\n    case 'string':\n        str = String(obj);\n        break;\n    }\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} similar to the one accepted by the constructor\n * of Web's ExternalAPI.\n *\n * @param {Object} o - The URL to return a {@code String} representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code Object}.\n */\nexport function urlObjectToString(o: Object): ?string {\n    const url = parseStandardURIString(_fixURIStringScheme(o.url || ''));\n\n    // protocol\n    if (!url.protocol) {\n        let protocol: ?string = o.protocol || o.scheme;\n\n        if (protocol) {\n            // Protocol is supposed to be the scheme and the final ':'. Anyway,\n            // do not make a fuss if the final ':' is not there.\n            protocol.endsWith(':') || (protocol += ':');\n            url.protocol = protocol;\n        }\n    }\n\n    // authority & pathname\n    let { pathname } = url;\n\n    if (!url.host) {\n        // Web's ExternalAPI domain\n        //\n        // It may be host/hostname and pathname with the latter denoting the\n        // tenant.\n        const domain: ?string = o.domain || o.host || o.hostname;\n\n        if (domain) {\n            const { host, hostname, pathname: contextRoot, port }\n                = parseStandardURIString(\n\n                    // XXX The value of domain in supposed to be host/hostname\n                    // and, optionally, pathname. Make sure it is not taken for\n                    // a pathname only.\n                    _fixURIStringScheme(`${APP_LINK_SCHEME}//${domain}`));\n\n            // authority\n            if (host) {\n                url.host = host;\n                url.hostname = hostname;\n                url.port = port;\n            }\n\n            // pathname\n            pathname === '/' && contextRoot !== '/' && (pathname = contextRoot);\n        }\n    }\n\n    // pathname\n\n    // Web's ExternalAPI roomName\n    const room = o.roomName || o.room;\n\n    if (room\n            && (url.pathname.endsWith('/')\n                || !url.pathname.endsWith(`/${room}`))) {\n        pathname.endsWith('/') || (pathname += '/');\n        pathname += room;\n    }\n\n    url.pathname = pathname;\n\n    // query/search\n\n    // Web's ExternalAPI jwt\n    const { jwt } = o;\n\n    if (jwt) {\n        let { search } = url;\n\n        if (search.indexOf('?jwt=') === -1 && search.indexOf('&jwt=') === -1) {\n            search.startsWith('?') || (search = `?${search}`);\n            search.length === 1 || (search += '&');\n            search += `jwt=${jwt}`;\n\n            url.search = search;\n        }\n    }\n\n    // fragment/hash\n\n    let { hash } = url;\n\n    for (const configName of [ 'config', 'interfaceConfig' ]) {\n        const urlParamsArray\n            = _objectToURLParamsArray(\n                o[`${configName}Overwrite`]\n                    || o[configName]\n                    || o[`${configName}Override`]);\n\n        if (urlParamsArray.length) {\n            let urlParamsString\n                = `${configName}.${urlParamsArray.join(`&${configName}.`)}`;\n\n            if (hash.length) {\n                urlParamsString = `&${urlParamsString}`;\n            } else {\n                hash = '#';\n            }\n            hash += urlParamsString;\n        }\n    }\n\n    url.hash = hash;\n\n    return url.toString() || undefined;\n}\n","// XXX The function parseURLParams is exported by the feature base/config (as\n// defined in the terminology of react/). However, this file is (very likely)\n// bundled in external_api in addition to app.bundle and, consequently, it is\n// best to import as little as possible here (rather than the whole feature\n// base/config) in order to minimize the amount of source code bundled into\n// multiple bundles.\nimport parseURLParams from '../../react/features/base/config/parseURLParams';\n\n/**\n * JitsiMeetExternalAPI id - unique for a webpage.\n */\nexport const API_ID\n    = parseURLParams(window.location).jitsi_meet_external_api_id;\n","/* @flow */\n\nimport { reportError } from '../util';\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {string} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\nexport default function parseURLParams(\n        url: URL,\n        dontParse: boolean = false,\n        source: string = 'hash'): Object {\n    const paramStr = source === 'search' ? url.search : url.hash;\n    const params = {};\n\n    // eslint-disable-next-line newline-per-chained-call\n    paramStr && paramStr.substr(1).split('&').forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n            if (!dontParse) {\n                value\n                    = JSON.parse(decodeURIComponent(value).replace(/\\\\&/, '&'));\n            }\n        } catch (e) {\n            reportError(\n                e, `Failed to parse URL parameter value: ${String(value)}`);\n\n            return;\n        }\n        params[key] = value;\n    });\n\n    return params;\n}\n","import Postis from 'postis';\n\n/**\n * The default options for postis.\n *\n * @type {Object}\n */\nconst DEFAULT_POSTIS_OPTIONS = {\n    window: window.opener || window.parent\n};\n\n/**\n * The list of methods of incoming postis messages that we have to support for\n * backward compatibility for the users that are directly sending messages to\n * Jitsi Meet (without using external_api.js)\n *\n * @type {string[]}\n */\nconst LEGACY_INCOMING_METHODS = [\n    'avatar-url',\n    'display-name',\n    'email',\n    'toggle-audio',\n    'toggle-chat',\n    'toggle-film-strip',\n    'toggle-share-screen',\n    'toggle-video',\n    'video-hangup'\n];\n\n/**\n * The list of methods of outgoing postis messages that we have to support for\n * backward compatibility for the users that are directly listening to the\n * postis messages send by Jitsi Meet(without using external_api.js).\n *\n * @type {string[]}\n */\nconst LEGACY_OUTGOING_METHODS = [\n    'display-name-change',\n    'incoming-message',\n    'outgoing-message',\n    'participant-joined',\n    'participant-left',\n    'video-conference-joined',\n    'video-conference-left',\n    'video-ready-to-close'\n];\n\n/**\n * The postis method used for all messages.\n *\n * @type {string}\n */\nconst POSTIS_METHOD_NAME = 'message';\n\n/**\n * Implements message transport using the postMessage API.\n */\nexport default class PostMessageTransportBackend {\n    /**\n     * Creates new PostMessageTransportBackend instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport.\n     */\n    constructor({ enableLegacyFormat, postisOptions } = {}) {\n        // eslint-disable-next-line new-cap\n        this.postis = Postis({\n            ...DEFAULT_POSTIS_OPTIONS,\n            ...postisOptions\n        });\n\n        /**\n         * If true PostMessageTransportBackend will process and send messages\n         * using the legacy format and in the same time the current format.\n         * Otherwise all messages (outgoing and incoming) that are using the\n         * legacy format will be ignored.\n         *\n         * @type {boolean}\n         */\n        this._enableLegacyFormat = enableLegacyFormat;\n\n        if (this._enableLegacyFormat) {\n            // backward compatibility\n            LEGACY_INCOMING_METHODS.forEach(method =>\n                this.postis.listen(\n                    method,\n                    params =>\n                        this._legacyMessageReceivedCallback(method, params)\n                )\n            );\n        }\n\n        this._receiveCallback = () => {\n            // Do nothing until a callback is set by the consumer of\n            // PostMessageTransportBackend via setReceiveCallback.\n        };\n\n        this.postis.listen(\n            POSTIS_METHOD_NAME,\n            message => this._receiveCallback(message));\n    }\n\n    /**\n     * Handles incoming legacy postis messages.\n     *\n     * @param {string} method - The method property from the postis message.\n     * @param {Any} params - The params property from the postis message.\n     * @returns {void}\n     */\n    _legacyMessageReceivedCallback(method, params = {}) {\n        this._receiveCallback({\n            data: {\n                name: method,\n                data: params\n            }\n        });\n    }\n\n    /**\n     * Sends the passed message via postis using the old format.\n     *\n     * @param {Object} legacyMessage - The message to be sent.\n     * @returns {void}\n     */\n    _sendLegacyMessage({ name, ...data }) {\n        if (name && LEGACY_OUTGOING_METHODS.indexOf(name) !== -1) {\n            this.postis.send({\n                method: name,\n                params: data\n            });\n        }\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this.postis.destroy();\n    }\n\n    /**\n     * Sends the passed message.\n     *\n     * @param {Object} message - The message to be sent.\n     * @returns {void}\n     */\n    send(message) {\n        this.postis.send({\n            method: POSTIS_METHOD_NAME,\n            params: message\n        });\n\n        if (this._enableLegacyFormat) {\n            // For the legacy use case we don't need any new fields defined in\n            // Transport class. That's why we are passing only the original\n            // object passed by the consumer of the Transport class which is\n            // message.data.\n            this._sendLegacyMessage(message.data || {});\n        }\n    }\n\n    /**\n     * Sets the callback for receiving data.\n     *\n     * @param {Function} callback - The new callback.\n     * @returns {void}\n     */\n    setReceiveCallback(callback) {\n        this._receiveCallback = callback;\n    }\n}\n","import {\n    MESSAGE_TYPE_EVENT,\n    MESSAGE_TYPE_REQUEST,\n    MESSAGE_TYPE_RESPONSE\n} from './constants';\n\n/**\n * Stores the currnet transport backend that have to be used. Also implements\n * request/response mechanism.\n */\nexport default class Transport {\n    /**\n     * Creates new instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport backend.\n     */\n    constructor({ backend } = {}) {\n        /**\n         * Maps an event name and listener that have been added to the Transport\n         * instance.\n         *\n         * @type {Map<string, Function>}\n         */\n        this._listeners = new Map();\n\n        /**\n         * The request ID counter used for the id property of the request. This\n         * property is used to match the responses with the request.\n         *\n         * @type {number}\n         */\n        this._requestID = 0;\n\n        /**\n         * Maps an IDs of the requests and handlers that will process the\n         * responses of those requests.\n         *\n         * @type {Map<number, Function>}\n         */\n        this._responseHandlers = new Map();\n\n        /**\n         * A set with the events and requests that were received but not\n         * processed by any listener. They are later passed on every new\n         * listener until they are processed.\n         *\n         * @type {Set<Object>}\n         */\n        this._unprocessedMessages = new Set();\n\n        /**\n         * Alias.\n         */\n        this.addListener = this.on;\n\n        if (backend) {\n            this.setBackend(backend);\n        }\n    }\n\n    /**\n     * Disposes the current transport backend.\n     *\n     * @returns {void}\n     */\n    _disposeBackend() {\n        if (this._backend) {\n            this._backend.dispose();\n            this._backend = null;\n        }\n    }\n\n    /**\n     * Handles incoming messages from the transport backend.\n     *\n     * @param {Object} message - The message.\n     * @returns {void}\n     */\n    _onMessageReceived(message) {\n        if (message.type === MESSAGE_TYPE_RESPONSE) {\n            const handler = this._responseHandlers.get(message.id);\n\n            if (handler) {\n                handler(message);\n                this._responseHandlers.delete(message.id);\n            }\n        } else if (message.type === MESSAGE_TYPE_REQUEST) {\n            this.emit('request', message.data, (result, error) => {\n                this._backend.send({\n                    type: MESSAGE_TYPE_RESPONSE,\n                    error,\n                    id: message.id,\n                    result\n                });\n            });\n        } else {\n            this.emit('event', message.data);\n        }\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._responseHandlers.clear();\n        this._unprocessedMessages.clear();\n        this.removeAllListeners();\n        this._disposeBackend();\n    }\n\n    /**\n     * Calls each of the listeners registered for the event named eventName, in\n     * the order they were registered, passing the supplied arguments to each.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @returns {boolean} True if the event has been processed by any listener,\n     * false otherwise.\n     */\n    emit(eventName, ...args) {\n        const listenersForEvent = this._listeners.get(eventName);\n        let isProcessed = false;\n\n        if (listenersForEvent && listenersForEvent.size) {\n            listenersForEvent.forEach(listener => {\n                isProcessed = listener(...args) || isProcessed;\n            });\n        }\n\n        if (!isProcessed) {\n            this._unprocessedMessages.add(args);\n        }\n\n        return isProcessed;\n    }\n\n    /**\n     * Adds the listener function to the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be added.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    on(eventName, listener) {\n        let listenersForEvent = this._listeners.get(eventName);\n\n        if (!listenersForEvent) {\n            listenersForEvent = new Set();\n            this._listeners.set(eventName, listenersForEvent);\n        }\n\n        listenersForEvent.add(listener);\n\n        this._unprocessedMessages.forEach(args => {\n            if (listener(...args)) {\n                this._unprocessedMessages.delete(args);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     *\n     * @param {string} [eventName] - The name of the event. If this parameter is\n     * not specified all listeners will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeAllListeners(eventName) {\n        if (eventName) {\n            this._listeners.delete(eventName);\n        } else {\n            this._listeners.clear();\n        }\n\n        return this;\n    }\n\n    /**\n     * Removes the listener function from the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeListener(eventName, listener) {\n        const listenersForEvent = this._listeners.get(eventName);\n\n        if (listenersForEvent) {\n            listenersForEvent.delete(listener);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sends the passed event.\n     *\n     * @param {Object} event - The event to be sent.\n     * @returns {void}\n     */\n    sendEvent(event = {}) {\n        if (this._backend) {\n            this._backend.send({\n                type: MESSAGE_TYPE_EVENT,\n                data: event\n            });\n        }\n    }\n\n    /**\n     * Sending request.\n     *\n     * @param {Object} request - The request to be sent.\n     * @returns {Promise}\n     */\n    sendRequest(request) {\n        if (!this._backend) {\n            return Promise.reject(new Error('No transport backend defined!'));\n        }\n\n        this._requestID++;\n\n        const id = this._requestID;\n\n        return new Promise((resolve, reject) => {\n            this._responseHandlers.set(id, ({ error, result }) => {\n                if (typeof result !== 'undefined') {\n                    resolve(result);\n\n                // eslint-disable-next-line no-negated-condition\n                } else if (typeof error !== 'undefined') {\n                    reject(error);\n                } else { // no response\n                    reject(new Error('Unexpected response format!'));\n                }\n            });\n\n            this._backend.send({\n                type: MESSAGE_TYPE_REQUEST,\n                data: request,\n                id\n            });\n        });\n    }\n\n    /**\n     * Changes the current backend transport.\n     *\n     * @param {Object} backend - The new transport backend that will be used.\n     * @returns {void}\n     */\n    setBackend(backend) {\n        this._disposeBackend();\n\n        this._backend = backend;\n        this._backend.setReceiveCallback(this._onMessageReceived.bind(this));\n    }\n}\n","/**\n * The message type for events.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_EVENT = 'event';\n\n/**\n * The message type for requests.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_REQUEST = 'request';\n\n/**\n * The message type for responses.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_RESPONSE = 'response';\n","// FIXME: change to '../API' when we update to webpack2. If we do this now all\n// files from API modules will be included in external_api.js.\nimport { API_ID } from '../API/constants';\nimport { getJitsiMeetGlobalNS } from '../../react/features/base/util';\n\nimport PostMessageTransportBackend from './PostMessageTransportBackend';\nimport Transport from './Transport';\n\nexport {\n    PostMessageTransportBackend,\n    Transport\n};\n\n/**\n * Option for the default low level transport.\n *\n * @type {Object}\n */\nconst postisOptions = {};\n\nif (typeof API_ID === 'number') {\n    postisOptions.scope = `jitsi_meet_external_api_${API_ID}`;\n}\n\n/**\n * The instance of Transport class that will be used by Jitsi Meet.\n *\n * @type {Transport}\n */\nlet transport;\n\n/**\n * Returns the instance of Transport class that will be used by Jitsi Meet.\n *\n * @returns {Transport}\n */\nexport function getJitsiMeetTransport() {\n    if (!transport) {\n        transport = new Transport({\n            backend: new PostMessageTransportBackend({\n                enableLegacyFormat: true,\n                postisOptions\n            })\n        });\n    }\n\n    return transport;\n}\n\n/**\n * Sets the transport to passed transport.\n *\n * @param {Object} externalTransportBackend - The new transport.\n * @returns {void}\n */\ngetJitsiMeetGlobalNS().setExternalTransportBackend = externalTransportBackend =>\n    transport.setBackend(externalTransportBackend);\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","// @flow\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n\n    return window.JitsiMeetJS.app;\n}\n\n/**\n * Gets the description of a specific {@code Symbol}.\n *\n * @param {Symbol} symbol - The {@code Symbol} to retrieve the description of.\n * @private\n * @returns {string} The description of {@code symbol}.\n */\nexport function getSymbolDescription(symbol: ?Symbol) {\n    let description = symbol ? symbol.toString() : 'undefined';\n\n    if (description.startsWith('Symbol(') && description.endsWith(')')) {\n        description = description.slice(7, -1);\n    }\n\n    // The polyfill es6-symbol that we use does not appear to comply with the\n    // Symbol standard and, merely, adds @@ at the beginning of the description.\n    if (description.startsWith('@@')) {\n        description = description.slice(2);\n    }\n\n    return description;\n}\n\n/**\n * A helper function that behaves similar to Object.assign, but only reassigns a\n * property in target if it's defined in source.\n *\n * @param {Object} target - The target object to assign the values into.\n * @param {Object} source - The source object.\n * @returns {Object}\n */\nexport function assignIfDefined(target: Object, source: Object) {\n    const to = Object(target);\n\n    for (const nextKey in source) {\n        if (source.hasOwnProperty(nextKey)) {\n            const value = source[nextKey];\n\n            if (typeof value !== 'undefined') {\n                to[nextKey] = value;\n            }\n        }\n    }\n\n    return to;\n}\n\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param {Error} e - The error object.\n * @param {string} msg - A custom message to print in addition to the error.\n * @returns {void}\n */\nexport function reportError(e: Object, msg: string = '') {\n    logger.error(msg, e);\n    window.onerror && window.onerror(msg, null, null, null, e);\n}\n","const logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Wrapper around fetch GET requests to handle json-ifying the response\n * and logging errors.\n *\n * @param {string} url - The URL to perform a GET against.\n * @returns {Promise<Object>} The response body, in JSON format, will be\n * through the Promise.\n */\nexport function doGetJSON(url) {\n    return fetch(url)\n        .then(response => {\n            const jsonify = response.json();\n\n            if (response.ok) {\n                return jsonify;\n            }\n\n            return jsonify\n                .then(result => Promise.reject(result));\n        })\n        .catch(error => {\n            logger.error('Error performing get:', url, error);\n\n            return Promise.reject(error);\n        });\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","function Postis(options) {\n  var scope = options.scope;\n  var targetWindow = options.window;\n  var windowForEventListening = options.windowForEventListening || window;\n  var listeners = {};\n  var sendBuffer = [];\n  var listenBuffer = {};\n  var ready = false;\n  var readyMethod = \"__ready__\";\n  var readynessCheck;\n\n  var listener = function(event) {\n    var data;\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n\n    if (data.postis && data.scope === scope) {\n      var listenersForMethod = listeners[data.method];\n      if (listenersForMethod) {\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          listenersForMethod[i].call(null, data.params);\n        }\n      } else {\n        listenBuffer[data.method] = listenBuffer[data.method] || [];\n        listenBuffer[data.method].push(data.params);\n      }\n    }\n  };\n\n  windowForEventListening.addEventListener(\"message\", listener, false);\n\n  var postis = {\n    listen: function (method, callback) {\n      listeners[method] = listeners[method] || [];\n      listeners[method].push(callback);\n\n      var listenBufferForMethod = listenBuffer[method];\n      if (listenBufferForMethod) {\n        var listenersForMethod = listeners[method];\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          for (var j = 0; j < listenBufferForMethod.length; j++) {\n            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n          }\n        }\n      }\n      delete listenBuffer[method];\n    },\n\n    send: function (opts) {\n      var method = opts.method;\n\n      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n        targetWindow.postMessage(JSON.stringify({\n          postis: true,\n          scope: scope,\n          method: method,\n          params: opts.params\n        }), \"*\");\n      } else {\n        sendBuffer.push(opts);\n      }\n    },\n\n    ready: function (callback) {\n      if (ready) {\n        callback();\n      } else {\n        setTimeout(function () { postis.ready(callback); }, 50);\n      }\n    },\n\n    destroy: function (callback) {\n      clearInterval(readynessCheck);\n      ready = false;\n      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n        windowForEventListening.removeEventListener(\"message\", listener);\n      }\n      callback && callback();\n    }\n  };\n\n  var readyCheckID = +new Date() + Math.random() + \"\";\n\n  readynessCheck = setInterval(function () {\n    postis.send({\n      method: readyMethod,\n      params: readyCheckID\n    });\n  }, 50);\n\n  postis.listen(readyMethod, function (id) {\n    if (id === readyCheckID) {\n      clearInterval(readynessCheck);\n      ready = true;\n\n      for (var i = 0; i < sendBuffer.length; i++) {\n        postis.send(sendBuffer[i]);\n      }\n      sendBuffer = [];\n    } else {\n      postis.send({\n        method: readyMethod,\n        params: id\n      });\n    }\n  });\n\n  return postis;\n}\n\nmodule.exports = Postis;\n","// For legacy purposes, preserve the UMD of the public API of Jitsi Meet\n// external API (a.k.a. JitsiMeetExternalAPI).\nmodule.exports = require('./external_api').default;\n","import EventEmitter from 'events';\n\nimport { urlObjectToString } from '../../../react/features/base/util/uri';\nimport {\n    PostMessageTransportBackend,\n    Transport\n} from '../../transport';\n\nimport electronPopupsConfig from './electronPopupsConfig.json';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nconst ALWAYS_ON_TOP_FILENAMES = [\n    'css/all.css', 'libs/alwaysontop.min.js'\n];\n\n/**\n * Maps the names of the commands expected by the API with the name of the\n * commands expected by jitsi-meet\n */\nconst commands = {\n    avatarUrl: 'avatar-url',\n    displayName: 'display-name',\n    email: 'email',\n    hangup: 'video-hangup',\n    submitFeedback: 'submit-feedback',\n    toggleAudio: 'toggle-audio',\n    toggleChat: 'toggle-chat',\n    toggleFilmStrip: 'toggle-film-strip',\n    toggleShareScreen: 'toggle-share-screen',\n    toggleVideo: 'toggle-video'\n};\n\n/**\n * Maps the names of the events expected by the API with the name of the\n * events expected by jitsi-meet\n */\nconst events = {\n    'avatar-changed': 'avatarChanged',\n    'audio-availability-changed': 'audioAvailabilityChanged',\n    'audio-mute-status-changed': 'audioMuteStatusChanged',\n    'display-name-change': 'displayNameChange',\n    'email-change': 'emailChange',\n    'feedback-submitted': 'feedbackSubmitted',\n    'incoming-message': 'incomingMessage',\n    'outgoing-message': 'outgoingMessage',\n    'participant-joined': 'participantJoined',\n    'participant-left': 'participantLeft',\n    'video-ready-to-close': 'readyToClose',\n    'video-conference-joined': 'videoConferenceJoined',\n    'video-conference-left': 'videoConferenceLeft',\n    'video-availability-changed': 'videoAvailabilityChanged',\n    'video-mute-status-changed': 'videoMuteStatusChanged',\n    'screen-sharing-status-changed': 'screenSharingStatusChanged'\n};\n\n/**\n * Last id of api object\n * @type {number}\n */\nlet id = 0;\n\n/**\n * Adds given number to the numberOfParticipants property of given APIInstance.\n *\n * @param {JitsiMeetExternalAPI} APIInstance - The instance of the API.\n * @param {int} number - The number of participants to be added to\n * numberOfParticipants property (this parameter can be negative number if the\n * numberOfParticipants should be decreased).\n * @returns {void}\n */\nfunction changeParticipantNumber(APIInstance, number) {\n    APIInstance._numberOfParticipants += number;\n}\n\n/**\n * Generates the URL for the iframe.\n *\n * @param {string} domain - The domain name of the server that hosts the\n * conference.\n * @param {string} [options] - Another optional parameters.\n * @param {Object} [options.configOverwrite] - Object containing configuration\n * options defined in config.js to be overridden.\n * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n * configuration options defined in interface_config.js to be overridden.\n * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n * authentication.\n * @param {boolean} [options.noSSL] - If the value is true https won't be used.\n * @param {string} [options.roomName] - The name of the room to join.\n * @returns {string} The URL.\n */\nfunction generateURL(domain, options = {}) {\n    return urlObjectToString({\n        ...options,\n        url:\n            `${options.noSSL ? 'http' : 'https'}://${\n                domain}/#jitsi_meet_external_api_id=${id}`\n    });\n}\n\n/**\n * Parses the arguments passed to the constructor. If the old format is used\n * the function translates the arguments to the new format.\n *\n * @param {Array} args - The arguments to be parsed.\n * @returns {Object} JS object with properties.\n */\nfunction parseArguments(args) {\n    if (!args.length) {\n        return {};\n    }\n\n    const firstArg = args[0];\n\n    switch (typeof firstArg) {\n    case 'string': // old arguments format\n    case undefined: {\n        // Not sure which format but we are trying to parse the old\n        // format because if the new format is used everything will be undefined\n        // anyway.\n        const [\n            roomName,\n            width,\n            height,\n            parentNode,\n            configOverwrite,\n            interfaceConfigOverwrite,\n            noSSL,\n            jwt,\n            onload\n        ] = args;\n\n        return {\n            roomName,\n            width,\n            height,\n            parentNode,\n            configOverwrite,\n            interfaceConfigOverwrite,\n            noSSL,\n            jwt,\n            onload\n        };\n    }\n    case 'object': // new arguments format\n        return args[0];\n    default:\n        throw new Error('Can\\'t parse the arguments!');\n    }\n}\n\n/**\n * Compute valid values for height and width. If a number is specified it's\n * treated as pixel units. If the value is expressed in px, em, pt or\n * percentage, it's used as is.\n *\n * @param {any} value - The value to be parsed.\n * @returns {string|undefined} The parsed value that can be used for setting\n * sizes through the style property. If invalid value is passed the method\n * retuns undefined.\n */\nfunction parseSizeParam(value) {\n    let parsedValue;\n\n    // This regex parses values of the form 100px, 100em, 100pt or 100%.\n    // Values like 100 or 100px are handled outside of the regex, and\n    // invalid values will be ignored and the minimum will be used.\n    const re = /([0-9]*\\.?[0-9]+)(em|pt|px|%)$/;\n\n    if (typeof value === 'string' && String(value).match(re) !== null) {\n        parsedValue = value;\n    } else if (typeof value === 'number') {\n        parsedValue = `${value}px`;\n    }\n\n    return parsedValue;\n}\n\n\n/**\n * The IFrame API interface class.\n */\nexport default class JitsiMeetExternalAPI extends EventEmitter {\n    /**\n     * Constructs new API instance. Creates iframe and loads Jitsi Meet in it.\n     *\n     * @param {string} domain - The domain name of the server that hosts the\n     * conference.\n     * @param {Object} [options] - Optional arguments.\n     * @param {string} [options.roomName] - The name of the room to join.\n     * @param {number|string} [options.width] - Width of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {number|string} [options.height] - Height of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {DOMElement} [options.parentNode] - The node that will contain the\n     * iframe.\n     * @param {Object} [options.configOverwrite] - Object containing\n     * configuration options defined in config.js to be overridden.\n     * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n     * configuration options defined in interface_config.js to be overridden.\n     * @param {boolean} [options.noSSL] - If the value is true https won't be\n     * used.\n     * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n     * authentication.\n     * @param {string} [options.onload] - The onload function that will listen\n     * for iframe onload event.\n     * @param {Array<Object>} [options.invitees] - Array of objects containing\n     * information about new participants that will be invited in the call.\n     */\n    constructor(domain, ...args) {\n        super();\n        const {\n            roomName = '',\n            width = '100%',\n            height = '100%',\n            parentNode = document.body,\n            configOverwrite = {},\n            interfaceConfigOverwrite = {},\n            noSSL = false,\n            jwt = undefined,\n            onload = undefined,\n            invitees\n        } = parseArguments(args);\n\n        this._parentNode = parentNode;\n        this._url = generateURL(domain, {\n            configOverwrite,\n            interfaceConfigOverwrite,\n            jwt,\n            noSSL,\n            roomName\n        });\n        this._createIFrame(height, width, onload);\n        this._transport = new Transport({\n            backend: new PostMessageTransportBackend({\n                postisOptions: {\n                    scope: `jitsi_meet_external_api_${id}`,\n                    window: this._frame.contentWindow\n                }\n            })\n        });\n        if (Array.isArray(invitees) && invitees.length > 0) {\n            this.invite(invitees);\n        }\n        this._isLargeVideoVisible = true;\n        this._numberOfParticipants = 0;\n        this._participants = {};\n        this._myUserID = undefined;\n        this._onStageParticipant = undefined;\n        this._setupListeners();\n        id++;\n    }\n\n    /**\n     * Creates the iframe element.\n     *\n     * @param {number|string} height - The height of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {number|string} width - The with of the iframe. Check\n     * parseSizeParam for format details.\n     * @param {Function} onload - The function that will listen\n     * for onload event.\n     * @returns {void}\n     *\n     * @private\n     */\n    _createIFrame(height, width, onload) {\n        const frameName = `jitsiConferenceFrame${id}`;\n\n        this._frame = document.createElement('iframe');\n        this._frame.allow = 'camera; microphone';\n        this._frame.src = this._url;\n        this._frame.name = frameName;\n        this._frame.id = frameName;\n        this._setSize(height, width);\n        this._frame.setAttribute('allowFullScreen', 'true');\n        this._frame.style.border = 0;\n\n        if (onload) {\n            // waits for iframe resources to load\n            // and fires event when it is done\n            this._frame.onload = onload;\n        }\n\n        this._frame = this._parentNode.appendChild(this._frame);\n    }\n\n    /**\n     * Returns arrays with the all resources for the always on top feature.\n     *\n     * @returns {Array<string>}\n     */\n    _getAlwaysOnTopResources() {\n        const iframeWindow = this._frame.contentWindow;\n        const iframeDocument = iframeWindow.document;\n        let baseURL = '';\n        const base = iframeDocument.querySelector('base');\n\n        if (base && base.href) {\n            baseURL = base.href;\n        } else {\n            const { protocol, host } = iframeWindow.location;\n\n            baseURL = `${protocol}//${host}`;\n        }\n\n        return ALWAYS_ON_TOP_FILENAMES.map(\n            filename => (new URL(filename, baseURL)).href\n        );\n    }\n\n    /**\n     * Returns the id of the on stage participant.\n     *\n     * @returns {string} - The id of the on stage participant.\n     */\n    _getOnStageParticipant() {\n        return this._onStageParticipant;\n    }\n\n\n    /**\n     * Getter for the large video element in Jitsi Meet.\n     *\n     * @returns {HTMLElement|undefined} - The large video.\n     */\n    _getLargeVideo() {\n        const iframe = this.getIFrame();\n\n        if (!this._isLargeVideoVisible\n                || !iframe\n                || !iframe.contentWindow\n                || !iframe.contentWindow.document) {\n            return;\n        }\n\n        return iframe.contentWindow.document.getElementById('largeVideo');\n    }\n\n    /**\n     * Sets the size of the iframe element.\n     *\n     * @param {number|string} height - The height of the iframe.\n     * @param {number|string} width - The with of the iframe.\n     * @returns {void}\n     *\n     * @private\n     */\n    _setSize(height, width) {\n        const parsedHeight = parseSizeParam(height);\n        const parsedWidth = parseSizeParam(width);\n\n        if (parsedHeight !== undefined) {\n            this._frame.style.height = parsedHeight;\n        }\n\n        if (parsedWidth !== undefined) {\n            this._frame.style.width = parsedWidth;\n        }\n    }\n\n    /**\n     * Setups listeners that are used internally for JitsiMeetExternalAPI.\n     *\n     * @returns {void}\n     *\n     * @private\n     */\n    _setupListeners() {\n        this._transport.on('event', ({ name, ...data }) => {\n            const userID = data.id;\n\n            switch (name) {\n            case 'video-conference-joined':\n                this._myUserID = userID;\n                this._participants[userID] = {\n                    avatarURL: data.avatarURL\n                };\n\n            // eslint-disable-next-line no-fallthrough\n            case 'participant-joined': {\n                this._participants[userID] = this._participants[userID] || {};\n                this._participants[userID].displayName = data.displayName;\n                this._participants[userID].formattedDisplayName\n                    = data.formattedDisplayName;\n                changeParticipantNumber(this, 1);\n                break;\n            }\n            case 'participant-left':\n                changeParticipantNumber(this, -1);\n                delete this._participants[userID];\n                break;\n            case 'display-name-change': {\n                const user = this._participants[userID];\n\n                if (user) {\n                    user.displayName = data.displayname;\n                    user.formattedDisplayName = data.formattedDisplayName;\n                }\n                break;\n            }\n            case 'email-change': {\n                const user = this._participants[userID];\n\n                if (user) {\n                    user.email = data.email;\n                }\n                break;\n            }\n            case 'avatar-changed': {\n                const user = this._participants[userID];\n\n                if (user) {\n                    user.avatarURL = data.avatarURL;\n                }\n                break;\n            }\n            case 'on-stage-participant-changed':\n                this._onStageParticipant = userID;\n                this.emit('largeVideoChanged');\n                break;\n            case 'large-video-visibility-changed':\n                this._isLargeVideoVisible = data.isVisible;\n                this.emit('largeVideoChanged');\n                break;\n            case 'video-conference-left':\n                changeParticipantNumber(this, -1);\n                delete this._participants[this._myUserID];\n                break;\n            }\n\n            const eventName = events[name];\n\n            if (eventName) {\n                this.emit(eventName, data);\n\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    /**\n     * Adds event listener to Meet Jitsi.\n     *\n     * @param {string} event - The name of the event.\n     * @param {Function} listener - The listener.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListener(event, listener) {\n        this.on(event, listener);\n    }\n\n    /**\n     * Adds event listeners to Meet Jitsi.\n     *\n     * @param {Object} listeners - The object key should be the name of\n     * the event and value - the listener.\n     * Currently we support the following\n     * events:\n     * {@code incomingMessage} - receives event notifications about incoming\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'from': from,//JID of the user that sent the message\n     *  'nick': nick,//the nickname of the user that sent the message\n     *  'message': txt//the text of the message\n     * }}\n     * {@code outgoingMessage} - receives event notifications about outgoing\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'message': txt//the text of the message\n     * }}\n     * {@code displayNameChanged} - receives event notifications about display\n     * name change. The listener will receive object with the following\n     * structure:\n     * {{\n     * jid: jid,//the JID of the participant that changed his display name\n     * displayname: displayName //the new display name\n     * }}\n     * {@code participantJoined} - receives event notifications about new\n     * participant.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * {@code participantLeft} - receives event notifications about the\n     * participant that left the room.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * {@code video-conference-joined} - receives event notifications about the\n     * local user has successfully joined the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * {@code video-conference-left} - receives event notifications about the\n     * local user has left the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * {@code screenSharingStatusChanged} - receives event notifications about\n     * turning on/off the local user screen sharing.\n     * The listener will receive object with the following structure:\n     * {{\n     * on: on //whether screen sharing is on\n     * }}\n     * {@code readyToClose} - all hangup operations are completed and Jitsi Meet\n     * is ready to be disposed.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListeners(listeners) {\n        for (const event in listeners) { // eslint-disable-line guard-for-in\n            this.addEventListener(event, listeners[event]);\n        }\n    }\n\n    /**\n     * Removes the listeners and removes the Jitsi Meet frame.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._transport.dispose();\n        this.removeAllListeners();\n        if (this._frame) {\n            this._frame.parentNode.removeChild(this._frame);\n        }\n    }\n\n    /**\n     * Executes command. The available commands are:\n     * {@code displayName} - Sets the display name of the local participant to\n     * the value passed in the arguments array.\n     * {@code toggleAudio} - Mutes / unmutes audio with no arguments.\n     * {@code toggleVideo} - Mutes / unmutes video with no arguments.\n     * {@code toggleFilmStrip} - Hides / shows the filmstrip with no arguments.\n     *\n     * If the command doesn't require any arguments the parameter should be set\n     * to empty array or it may be omitted.\n     *\n     * @param {string} name - The name of the command.\n     * @returns {void}\n     */\n    executeCommand(name, ...args) {\n        if (!(name in commands)) {\n            logger.error('Not supported command name.');\n\n            return;\n        }\n        this._transport.sendEvent({\n            data: args,\n            name: commands[name]\n        });\n    }\n\n    /**\n     * Executes commands. The available commands are:\n     * {@code displayName} - Sets the display name of the local participant to\n     * the value passed in the arguments array.\n     * {@code toggleAudio} - Mutes / unmutes audio. No arguments.\n     * {@code toggleVideo} - Mutes / unmutes video. No arguments.\n     * {@code toggleFilmStrip} - Hides / shows the filmstrip. No arguments.\n     * {@code toggleChat} - Hides / shows chat. No arguments.\n     * {@code toggleShareScreen} - Starts / stops screen sharing. No arguments.\n     *\n     * @param {Object} commandList - The object with commands to be executed.\n     * The keys of the object are the commands that will be executed and the\n     * values are the arguments for the command.\n     * @returns {void}\n     */\n    executeCommands(commandList) {\n        for (const key in commandList) { // eslint-disable-line guard-for-in\n            this.executeCommand(key, commandList[key]);\n        }\n    }\n\n    /**\n     * Check if the audio is available.\n     *\n     * @returns {Promise} - Resolves with true if the audio available, with\n     * false if not and rejects on failure.\n     */\n    isAudioAvailable() {\n        return this._transport.sendRequest({\n            name: 'is-audio-available'\n        });\n    }\n\n    /**\n     * Invite people to the call.\n     *\n     * @param {Array<Object>} invitees - The invitees.\n     * @returns {Promise} - Resolves on success and rejects on failure.\n     */\n    invite(invitees) {\n        if (!Array.isArray(invitees) || invitees.length === 0) {\n            return Promise.reject(new TypeError('Invalid Argument'));\n        }\n\n        return this._transport.sendRequest({\n            name: 'invite',\n            invitees\n        });\n    }\n\n    /**\n     * Returns the audio mute status.\n     *\n     * @returns {Promise} - Resolves with the audio mute status and rejects on\n     * failure.\n     */\n    isAudioMuted() {\n        return this._transport.sendRequest({\n            name: 'is-audio-muted'\n        });\n    }\n\n    /**\n     * Returns the avatar URL of a participant.\n     *\n     * @param {string} participantId - The id of the participant.\n     * @returns {string} The avatar URL.\n     */\n    getAvatarURL(participantId) {\n        const { avatarURL } = this._participants[participantId] || {};\n\n        return avatarURL;\n    }\n\n    /**\n     * Returns the display name of a participant.\n     *\n     * @param {string} participantId - The id of the participant.\n     * @returns {string} The display name.\n     */\n    getDisplayName(participantId) {\n        const { displayName } = this._participants[participantId] || {};\n\n        return displayName;\n    }\n\n    /**\n     * Returns the email of a participant.\n     *\n     * @param {string} participantId - The id of the participant.\n     * @returns {string} The email.\n     */\n    getEmail(participantId) {\n        const { email } = this._participants[participantId] || {};\n\n        return email;\n    }\n\n    /**\n     * Returns the formatted display name of a participant.\n     *\n     * @param {string} participantId - The id of the participant.\n     * @returns {string} The formatted display name.\n     */\n    _getFormattedDisplayName(participantId) {\n        const { formattedDisplayName }\n            = this._participants[participantId] || {};\n\n        return formattedDisplayName;\n    }\n\n    /**\n     * Returns the iframe that loads Jitsi Meet.\n     *\n     * @returns {HTMLElement} The iframe.\n     */\n    getIFrame() {\n        return this._frame;\n    }\n\n    /**\n     * Returns the number of participants in the conference. The local\n     * participant is included.\n     *\n     * @returns {int} The number of participants in the conference.\n     */\n    getNumberOfParticipants() {\n        return this._numberOfParticipants;\n    }\n\n    /**\n     * Check if the video is available.\n     *\n     * @returns {Promise} - Resolves with true if the video available, with\n     * false if not and rejects on failure.\n     */\n    isVideoAvailable() {\n        return this._transport.sendRequest({\n            name: 'is-video-available'\n        });\n    }\n\n    /**\n     * Returns the audio mute status.\n     *\n     * @returns {Promise} - Resolves with the audio mute status and rejects on\n     * failure.\n     */\n    isVideoMuted() {\n        return this._transport.sendRequest({\n            name: 'is-video-muted'\n        });\n    }\n\n    /**\n     * Removes event listener.\n     *\n     * @param {string} event - The name of the event.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListener(event) {\n        this.removeAllListeners(event);\n    }\n\n    /**\n     * Removes event listeners.\n     *\n     * @param {Array<string>} eventList - Array with the names of the events.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListeners(eventList) {\n        eventList.forEach(event => this.removeEventListener(event));\n    }\n\n    /**\n     * Returns the configuration for electron for the windows that are open\n     * from Jitsi Meet.\n     *\n     * @returns {Promise<Object>}\n     *\n     * NOTE: For internal use only.\n     */\n    _getElectronPopupsConfig() {\n        return Promise.resolve(electronPopupsConfig);\n    }\n}\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n"],"sourceRoot":""}