{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"/Users/user/Downloads/jitsi-meet-master/node_modules/jitsi-meet-logger/lib/Logger.js\",\"/Users/user/Downloads/jitsi-meet-master/react/features/base/util/helpers.js\",\"/Users/user/Downloads/jitsi-meet-master/react/features/base/util/httpUtils.js\",\"/Users/user/Downloads/jitsi-meet-master/react/features/base/util/uri.js\",\"/Users/user/Downloads/jitsi-meet-master/node_modules/jitsi-meet-logger/lib/LogCollector.js\",\"/Users/user/Downloads/jitsi-meet-master/node_modules/jitsi-meet-logger/lib/index.js\",\"/Users/user/Downloads/jitsi-meet-master/react/features/base/util/loadScript.web.js\",\"/Users/user/Downloads/jitsi-meet-master/react/features/base/util/randomUtil.js\",\"/Users/user/Downloads/jitsi-meet-master/react/features/base/util/index.js\",\"/Users/user/Downloads/jitsi-meet-master/react/features/analytics/handlers/AbstractHandler.js\",\"/Users/user/Downloads/jitsi-meet-master/react/features/analytics/handlers/GoogleAnalyticsHandler.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"levels\",\"trace\",\"debug\",\"info\",\"log\",\"warn\",\"error\",\"Logger\",\"consoleTransport\",\"console\",\"globalTransports\",\"logger\",\"arguments\",\"level\",\"args\",\"Array\",\"slice\",\"callerInfo\",\"methodName\",\"fileLocation\",\"line\",\"column\",\"Error\",\"stack\",\"split\",\"length\",\"match\",\"indexOf\",\"substr\",\"getCallerInfo\",\"transports\",\"concat\",\"id\",\"apply\",\"format\",\"this\",\"methods\",\"keys\",\"addGlobalTransport\",\"transport\",\"push\",\"removeGlobalTransport\",\"transportIdx\",\"splice\",\"setLevel\",\"TRACE\",\"DEBUG\",\"INFO\",\"LOG\",\"WARN\",\"ERROR\",\"__filename\",\"__webpack_exports__\",\"getJitsiMeetGlobalNS\",\"assignIfDefined\",\"reportError\",\"require\",\"getLogger\",\"window\",\"JitsiMeetJS\",\"app\",\"target\",\"source\",\"to\",\"nextKey\",\"e\",\"msg\",\"undefined\",\"onerror\",\"doGetJSON\",\"url\",\"fetch\",\"then\",\"response\",\"jsonify\",\"json\",\"ok\",\"result\",\"Promise\",\"reject\",\"catch\",\"APP_LINK_SCHEME\",\"_ROOM_EXCLUDE_PATTERN\",\"_URI_AUTHORITY_PATTERN\",\"_URI_PATH_PATTERN\",\"URI_PROTOCOL_PATTERN\",\"_fixURIStringScheme\",\"uri\",\"regex\",\"RegExp\",\"exec\",\"protocol\",\"toLowerCase\",\"substring\",\"lastIndex\",\"startsWith\",\"getLocationContextRoot\",\"_ref\",\"pathname\",\"contextRootEndIndex\",\"lastIndexOf\",\"_objectToURLParamsArray\",\"obj\",\"params\",\"encodeURIComponent\",\"JSON\",\"stringify\",\"parseStandardURIString\",\"str\",\"toString\",\"_standardURIToString\",\"replace\",\"authority\",\"userinfoEndIndex\",\"host\",\"portBeginIndex\",\"port\",\"hostname\",\"hashBeginIndex\",\"search\",\"hash\",\"parseURIString\",\"contextRoot\",\"room\",\"fixedRoom\",\"_fixRoom\",\"thiz\",\"_ref2\",\"toURLString\",\"_typeof\",\"URL\",\"href\",\"scheme\",\"endsWith\",\"domain\",\"_parseStandardURIStri\",\"roomName\",\"jwt\",\"_arr\",\"_i\",\"configName\",\"urlParamsArray\",\"urlParamsString\",\"join\",\"urlObjectToString\",\"String\",\"LogCollector\",\"logStorage\",\"options\",\"stringifyObjects\",\"storeInterval\",\"maxEntryLength\",\"forEach\",\"logLevel\",\"_log\",\"storeLogsIntervalID\",\"queue\",\"totalLen\",\"outputCache\",\"someObject\",\"formatLogMessage\",\"len\",\"arg\",\"prevMessage\",\"text\",\"count\",\"_flush\",\"start\",\"_reschedulePublishInterval\",\"clearTimeout\",\"setTimeout\",\"flush\",\"force\",\"reschedule\",\"isReady\",\"cachedQueue\",\"storeLogs\",\"stop\",\"idLoggers\",\"loggers\",\"curLevel\",\"setLogLevelById\",\"setLogLevel\",\"loadScript\",\"resolve\",\"util\",\"ScriptUtil\",\"HEX_DIGITS\",\"randomElement\",\"arr\",\"randomInt\",\"randomHexString\",\"_randomString\",\"min\",\"max\",\"Math\",\"floor\",\"random\",\"characters\",\"helpers\",\"httpUtils\",\"AbstractHandler\",\"_classCallCheck\",\"_enabled\",\"_ignoredEvents\",\"event\",\"type\",\"action\",\"actionSubject\",\"GoogleAnalyticsHandler\",\"_this\",\"_possibleConstructorReturn\",\"_getPrototypeOf\",\"_userProperties\",\"googleAnalyticsTrackingId\",\"_initGoogleAnalytics\",\"a\",\"document\",\"q\",\"Date\",\"createElement\",\"getElementsByTagName\",\"async\",\"src\",\"parentNode\",\"insertBefore\",\"ga\",\"attributes\",\"round\",\"parseFloat\",\"_event$attributes\",\"labelsArray\",\"map\",\"_userPropertiesString\",\"userProps\",\"filter\",\"_shouldIgnore\",\"gaEvent\",\"eventCategory\",\"eventAction\",\"_extractName\",\"eventLabel\",\"_extractLabel\",\"_extractValue\",\"isNaN\",\"eventValue\",\"globalNS\",\"analyticsHandlers\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n \\t\\t}\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// create a fake namespace object\\n \\t// mode & 1: value is a module id, require it\\n \\t// mode & 2: merge all properties of value into the ns\\n \\t// mode & 4: return value when already ns object\\n \\t// mode & 8|1: behave like require\\n \\t__webpack_require__.t = function(value, mode) {\\n \\t\\tif(mode & 1) value = __webpack_require__(value);\\n \\t\\tif(mode & 8) return value;\\n \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n \\t\\tvar ns = Object.create(null);\\n \\t\\t__webpack_require__.r(ns);\\n \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n \\t\\treturn ns;\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"/libs/\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 889);\\n\",\"/* Copyright @ 2015 Atlassian Pty Ltd\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\n/**\\n * Ordered log levels.\\n */\\nvar levels = {\\n    \\\"trace\\\": 0,\\n    \\\"debug\\\": 1,\\n    \\\"info\\\": 2,\\n    \\\"log\\\": 3,\\n    \\\"warn\\\": 4,\\n    \\\"error\\\": 5\\n};\\n\\n/**\\n * The default transport - console\\n * @type LoggerTransport\\n */\\nLogger.consoleTransport = console;\\n\\n/**\\n * The array which stores currently registered global transports.\\n * @type {[LoggerTransport]}\\n */\\nvar globalTransports = [ Logger.consoleTransport ];\\n\\n/**\\n * Adds given {@link LoggerTransport} instance to the list of global\\n * transports which means that it'll be used by all {@link Logger}s\\n * @param {LoggerTransport} transport\\n */\\nLogger.addGlobalTransport = function(transport) {\\n    if (globalTransports.indexOf(transport) === -1) {\\n        globalTransports.push(transport);\\n    }\\n};\\n\\n/**\\n * Removes given {@link LoggerTransport} instance from the list of global\\n * transports\\n * @param {LoggerTransport} transport\\n */\\nLogger.removeGlobalTransport = function(transport) {\\n    var transportIdx = globalTransports.indexOf(transport);\\n    if (transportIdx !== -1) {\\n        globalTransports.splice(transportIdx, 1);\\n    }\\n};\\n\\n/**\\n * Parses Error's object stack trace and extracts information about the last\\n * caller before the log method was called.\\n * @returns JS object with info about the caller - method name, file location,\\n * line and column.\\n */\\nfunction getCallerInfo() {\\n    var callerInfo = {\\n        methodName: \\\"\\\",\\n        fileLocation: \\\"\\\",\\n        line: null,\\n        column: null\\n    };\\n    //gets the part of the stack without the logger wrappers\\n    var error = new Error();\\n    var stack = error.stack? error.stack.split(\\\"\\\\n\\\") : [];\\n    if(!stack || stack.length < 1) {\\n        return callerInfo;\\n    }\\n    var m = null;\\n    if(stack[3]) {\\n        m = stack[3].match(/\\\\s*at\\\\s*(.+?)\\\\s*\\\\((\\\\S*)\\\\s*:(\\\\d*)\\\\s*:(\\\\d*)\\\\)/);\\n    }\\n    if(!m || m.length <= 4) {\\n        //Firefox && Safari\\n        if(stack[2].indexOf(\\\"log@\\\") === 0){\\n            //Safari\\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\\\"@\\\"));\\n        } else {\\n            //Firefox\\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\\\"@\\\"));\\n        }\\n        return callerInfo;\\n    }\\n\\n    callerInfo.methodName = m[1];\\n    callerInfo.fileLocation = m[2];\\n    callerInfo.line = m[3];\\n    callerInfo.column = m[4];\\n    return callerInfo;\\n}\\n\\n/**\\n * Logs messages using the transports and level from the logger.\\n * @param logger a logger instance.\\n * @param level the log level of the message. See the levels variable.\\n * @param arguments array with arguments that will be logged.\\n */\\nfunction log() {\\n    var logger = arguments[0], level = arguments[1],\\n        args = Array.prototype.slice.call(arguments, 2);\\n    if(levels[level] < logger.level) {\\n        return;\\n    }\\n\\n    var callerInfo = getCallerInfo();\\n    var transports = globalTransports.concat(logger.transports);\\n    for(var i = 0; i < transports.length; i++) {\\n        var t = transports[i];\\n        var l = t[level];\\n        if(l && typeof(l) === \\\"function\\\") {\\n            l.bind(t, logger.id? \\\"[\\\" + logger.id + \\\"]\\\" : \\\"\\\", \\\"<\\\" + callerInfo.methodName + \\\">: \\\")\\n                .apply(t, args);\\n        }\\n    }\\n}\\n\\n/**\\n *\\n * Constructs new logger object.\\n * @param level the logging level for the new logger\\n * @param id optional identifier for the logger instance.\\n * @param {LoggerTransport} transports optional list of handlers(objects) for\\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\\n * @param format optional (NOT implemented) string.\\n */\\nfunction Logger(level, id, transports, format) {\\n    this.id = id;\\n    this.format = format;\\n    this.transports = transports;\\n    if(!this.transports) {\\n        this.transports = [];\\n    }\\n    this.level = levels[level];\\n    var methods = Object.keys(levels);\\n    for(var i = 0; i < methods.length; i++){\\n        this[methods[i]] =\\n            log.bind(null, this, methods[i]);\\n    }\\n}\\n\\n/**\\n * Sets the log level for the logger.\\n * @param level the new log level.\\n */\\nLogger.prototype.setLevel = function (level) {\\n    this.level = levels[level];\\n};\\nmodule.exports = Logger;\\n\\n/**\\n * Enum for the supported log levels.\\n */\\nLogger.levels = {\\n    TRACE: \\\"trace\\\",\\n    DEBUG: \\\"debug\\\",\\n    INFO: \\\"info\\\",\\n    LOG: \\\"log\\\",\\n    WARN: \\\"warn\\\",\\n    ERROR: \\\"error\\\"\\n};\\n\",\"// @flow\\n\\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\\n\\n/**\\n * Returns the namespace for all global variables, functions, etc that we need.\\n *\\n * @returns {Object} The namespace.\\n *\\n * NOTE: After React-ifying everything this should be the only global.\\n */\\nexport function getJitsiMeetGlobalNS() {\\n    if (!window.JitsiMeetJS) {\\n        window.JitsiMeetJS = {};\\n    }\\n\\n    if (!window.JitsiMeetJS.app) {\\n        window.JitsiMeetJS.app = {};\\n    }\\n\\n    return window.JitsiMeetJS.app;\\n}\\n\\n/**\\n * Gets the description of a specific {@code Symbol}.\\n *\\n * @param {Symbol} symbol - The {@code Symbol} to retrieve the description of.\\n * @private\\n * @returns {string} The description of {@code symbol}.\\n */\\nexport function getSymbolDescription(symbol: ?Symbol) {\\n    let description = symbol ? symbol.toString() : 'undefined';\\n\\n    if (description.startsWith('Symbol(') && description.endsWith(')')) {\\n        description = description.slice(7, -1);\\n    }\\n\\n    // The polyfill es6-symbol that we use does not appear to comply with the\\n    // Symbol standard and, merely, adds @@ at the beginning of the description.\\n    if (description.startsWith('@@')) {\\n        description = description.slice(2);\\n    }\\n\\n    return description;\\n}\\n\\n/**\\n * A helper function that behaves similar to Object.assign, but only reassigns a\\n * property in target if it's defined in source.\\n *\\n * @param {Object} target - The target object to assign the values into.\\n * @param {Object} source - The source object.\\n * @returns {Object}\\n */\\nexport function assignIfDefined(target: Object, source: Object) {\\n    const to = Object(target);\\n\\n    for (const nextKey in source) {\\n        if (source.hasOwnProperty(nextKey)) {\\n            const value = source[nextKey];\\n\\n            if (typeof value !== 'undefined') {\\n                to[nextKey] = value;\\n            }\\n        }\\n    }\\n\\n    return to;\\n}\\n\\n/**\\n * Prints the error and reports it to the global error handler.\\n *\\n * @param {Error} e - The error object.\\n * @param {string} msg - A custom message to print in addition to the error.\\n * @returns {void}\\n */\\nexport function reportError(e: Object, msg: string = '') {\\n    logger.error(msg, e);\\n    window.onerror && window.onerror(msg, null, null, null, e);\\n}\\n\",\"const logger = require('jitsi-meet-logger').getLogger(__filename);\\n\\n/**\\n * Wrapper around fetch GET requests to handle json-ifying the response\\n * and logging errors.\\n *\\n * @param {string} url - The URL to perform a GET against.\\n * @returns {Promise<Object>} The response body, in JSON format, will be\\n * through the Promise.\\n */\\nexport function doGetJSON(url) {\\n    return fetch(url)\\n        .then(response => {\\n            const jsonify = response.json();\\n\\n            if (response.ok) {\\n                return jsonify;\\n            }\\n\\n            return jsonify\\n                .then(result => Promise.reject(result));\\n        })\\n        .catch(error => {\\n            logger.error('Error performing get:', url, error);\\n\\n            return Promise.reject(error);\\n        });\\n}\\n\",\"// @flow\\n\\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\\n\\n/**\\n * The app linking scheme.\\n * TODO: This should be read from the manifest files later.\\n */\\nexport const APP_LINK_SCHEME = 'org.jitsi.meet:';\\n\\n/**\\n * A list of characters to be excluded/removed from the room component/segment\\n * of a conference/meeting URI/URL. The list is based on RFC 3986 and the jxmpp\\n * library utilized by jicofo.\\n */\\nconst _ROOM_EXCLUDE_PATTERN = '[\\\\\\\\:\\\\\\\\?#\\\\\\\\[\\\\\\\\]@!$&\\\\'()*+,;=></\\\"]';\\n\\n/**\\n * The {@link RegExp} pattern of the authority of a URI.\\n *\\n * @private\\n * @type {string}\\n */\\nconst _URI_AUTHORITY_PATTERN = '(//[^/?#]+)';\\n\\n/**\\n * The {@link RegExp} pattern of the path of a URI.\\n *\\n * @private\\n * @type {string}\\n */\\nconst _URI_PATH_PATTERN = '([^?#]*)';\\n\\n/**\\n * The {@link RegExp} pattern of the protocol of a URI.\\n *\\n * FIXME: The URL class exposed by JavaScript will not include the colon in\\n * the protocol field. Also in other places (at the time of this writing:\\n * the DeepLinkingMobilePage.js) the APP_LINK_SCHEME does not include\\n * the double dots, so things are inconsistent.\\n *\\n * @type {string}\\n */\\nexport const URI_PROTOCOL_PATTERN = '([a-z][a-z0-9\\\\\\\\.\\\\\\\\+-]*:)';\\n\\n/**\\n * Excludes/removes certain characters from a specific room (name) which are\\n * incompatible with Jitsi Meet on the client and/or server sides.\\n *\\n * @param {?string} room - The room (name) to fix.\\n * @private\\n * @returns {?string}\\n */\\nfunction _fixRoom(room: ?string) {\\n    return room\\n        ? room.replace(new RegExp(_ROOM_EXCLUDE_PATTERN, 'g'), '')\\n        : room;\\n}\\n\\n/**\\n * Fixes the scheme part of a specific URI (string) so that it contains a\\n * well-known scheme such as HTTP(S). For example, the mobile app implements an\\n * app-specific URI scheme in addition to Universal Links. The app-specific\\n * scheme may precede or replace the well-known scheme. In such a case, dealing\\n * with the app-specific scheme only complicates the logic and it is simpler to\\n * get rid of it (by translating the app-specific scheme into a well-known\\n * scheme).\\n *\\n * @param {string} uri - The URI (string) to fix the scheme of.\\n * @private\\n * @returns {string}\\n */\\nfunction _fixURIStringScheme(uri: string) {\\n    const regex = new RegExp(`^${URI_PROTOCOL_PATTERN}+`, 'gi');\\n    const match: Array<string> | null = regex.exec(uri);\\n\\n    if (match) {\\n        // As an implementation convenience, pick up the last scheme and make\\n        // sure that it is a well-known one.\\n        let protocol = match[match.length - 1].toLowerCase();\\n\\n        if (protocol !== 'http:' && protocol !== 'https:') {\\n            protocol = 'https:';\\n        }\\n\\n        /* eslint-disable no-param-reassign */\\n\\n        uri = uri.substring(regex.lastIndex);\\n        if (uri.startsWith('//')) {\\n            // The specified URL was not a room name only, it contained an\\n            // authority.\\n            uri = protocol + uri;\\n        }\\n\\n        /* eslint-enable no-param-reassign */\\n    }\\n\\n    return uri;\\n}\\n\\n/**\\n * Gets the (Web application) context root defined by a specific location (URI).\\n *\\n * @param {Object} location - The location (URI) which defines the (Web\\n * application) context root.\\n * @public\\n * @returns {string} - The (Web application) context root defined by the\\n * specified {@code location} (URI).\\n */\\nexport function getLocationContextRoot({ pathname }: { pathname: string }) {\\n    const contextRootEndIndex = pathname.lastIndexOf('/');\\n\\n    return (\\n        contextRootEndIndex === -1\\n            ? '/'\\n            : pathname.substring(0, contextRootEndIndex + 1));\\n}\\n\\n/**\\n * Constructs a new {@code Array} with URL parameter {@code String}s out of a\\n * specific {@code Object}.\\n *\\n * @param {Object} obj - The {@code Object} to turn into URL parameter\\n * {@code String}s.\\n * @returns {Array<string>} The {@code Array} with URL parameter {@code String}s\\n * constructed out of the specified {@code obj}.\\n */\\nfunction _objectToURLParamsArray(obj = {}) {\\n    const params = [];\\n\\n    for (const key in obj) { // eslint-disable-line guard-for-in\\n        try {\\n            params.push(\\n                `${key}=${encodeURIComponent(JSON.stringify(obj[key]))}`);\\n        } catch (e) {\\n            logger.warn(`Error encoding ${key}: ${e}`);\\n        }\\n    }\\n\\n    return params;\\n}\\n\\n/**\\n * Parses a specific URI string into an object with the well-known properties of\\n * the {@link Location} and/or {@link URL} interfaces implemented by Web\\n * browsers. The parsing attempts to be in accord with IETF's RFC 3986.\\n *\\n * @param {string} str - The URI string to parse.\\n * @public\\n * @returns {{\\n *     hash: string,\\n *     host: (string|undefined),\\n *     hostname: (string|undefined),\\n *     pathname: string,\\n *     port: (string|undefined),\\n *     protocol: (string|undefined),\\n *     search: string\\n * }}\\n */\\nexport function parseStandardURIString(str: string) {\\n    /* eslint-disable no-param-reassign */\\n\\n    const obj: Object = {\\n        toString: _standardURIToString\\n    };\\n\\n    let regex;\\n    let match: Array<string> | null;\\n\\n    // XXX A URI string as defined by RFC 3986 does not contain any whitespace.\\n    // Usually, a browser will have already encoded any whitespace. In order to\\n    // avoid potential later problems related to whitespace in URI, strip any\\n    // whitespace. Anyway, the Jitsi Meet app is not known to utilize unencoded\\n    // whitespace so the stripping is deemed safe.\\n    str = str.replace(/\\\\s/g, '');\\n\\n    // protocol\\n    regex = new RegExp(`^${URI_PROTOCOL_PATTERN}`, 'gi');\\n    match = regex.exec(str);\\n    if (match) {\\n        obj.protocol = match[1].toLowerCase();\\n        str = str.substring(regex.lastIndex);\\n    }\\n\\n    // authority\\n    regex = new RegExp(`^${_URI_AUTHORITY_PATTERN}`, 'gi');\\n    match = regex.exec(str);\\n    if (match) {\\n        let authority: string = match[1].substring(/* // */ 2);\\n\\n        str = str.substring(regex.lastIndex);\\n\\n        // userinfo\\n        const userinfoEndIndex = authority.indexOf('@');\\n\\n        if (userinfoEndIndex !== -1) {\\n            authority = authority.substring(userinfoEndIndex + 1);\\n        }\\n\\n        obj.host = authority;\\n\\n        // port\\n        const portBeginIndex = authority.lastIndexOf(':');\\n\\n        if (portBeginIndex !== -1) {\\n            obj.port = authority.substring(portBeginIndex + 1);\\n            authority = authority.substring(0, portBeginIndex);\\n        }\\n\\n        // hostname\\n        obj.hostname = authority;\\n    }\\n\\n    // pathname\\n    regex = new RegExp(`^${_URI_PATH_PATTERN}`, 'gi');\\n    match = regex.exec(str);\\n\\n    let pathname: ?string;\\n\\n    if (match) {\\n        pathname = match[1];\\n        str = str.substring(regex.lastIndex);\\n    }\\n    if (pathname) {\\n        pathname.startsWith('/') || (pathname = `/${pathname}`);\\n    } else {\\n        pathname = '/';\\n    }\\n    obj.pathname = pathname;\\n\\n    // query\\n    if (str.startsWith('?')) {\\n        let hashBeginIndex = str.indexOf('#', 1);\\n\\n        if (hashBeginIndex === -1) {\\n            hashBeginIndex = str.length;\\n        }\\n        obj.search = str.substring(0, hashBeginIndex);\\n        str = str.substring(hashBeginIndex);\\n    } else {\\n        obj.search = ''; // Google Chrome\\n    }\\n\\n    // fragment\\n    obj.hash = str.startsWith('#') ? str : '';\\n\\n    /* eslint-enable no-param-reassign */\\n\\n    return obj;\\n}\\n\\n/**\\n * Parses a specific URI which (supposedly) references a Jitsi Meet resource\\n * (location).\\n *\\n * @param {(string|undefined)} uri - The URI to parse which (supposedly)\\n * references a Jitsi Meet resource (location).\\n * @public\\n * @returns {{\\n *     contextRoot: string,\\n *     hash: string,\\n *     host: string,\\n *     hostname: string,\\n *     pathname: string,\\n *     port: string,\\n *     protocol: string,\\n *     room: (string|undefined),\\n *     search: string\\n * }}\\n */\\nexport function parseURIString(uri: ?string) {\\n    if (typeof uri !== 'string') {\\n        return undefined;\\n    }\\n\\n    const obj = parseStandardURIString(_fixURIStringScheme(uri));\\n\\n    // Add the properties that are specific to a Jitsi Meet resource (location)\\n    // such as contextRoot, room:\\n\\n    // contextRoot\\n    obj.contextRoot = getLocationContextRoot(obj);\\n\\n    // The room (name) is the last component/segment of pathname.\\n    const { pathname } = obj;\\n\\n    // XXX While the components/segments of pathname are URI encoded, Jitsi Meet\\n    // on the client and/or server sides still don't support certain characters.\\n    const contextRootEndIndex = pathname.lastIndexOf('/');\\n    let room = pathname.substring(contextRootEndIndex + 1) || undefined;\\n\\n    if (room) {\\n        const fixedRoom = _fixRoom(room);\\n\\n        if (fixedRoom !== room) {\\n            room = fixedRoom;\\n\\n            // XXX Drive fixedRoom into pathname (because room is derived from\\n            // pathname).\\n            obj.pathname\\n                = pathname.substring(0, contextRootEndIndex + 1) + (room || '');\\n        }\\n    }\\n    obj.room = room;\\n\\n    return obj;\\n}\\n\\n/**\\n * Implements {@code href} and {@code toString} for the {@code Object} returned\\n * by {@link #parseStandardURIString}.\\n *\\n * @param {Object} [thiz] - An {@code Object} returned by\\n * {@code #parseStandardURIString} if any; otherwise, it is presumed that the\\n * function is invoked on such an instance.\\n * @returns {string}\\n */\\nfunction _standardURIToString(thiz: ?Object) {\\n    // eslint-disable-next-line no-invalid-this\\n    const { hash, host, pathname, protocol, search } = thiz || this;\\n    let str = '';\\n\\n    protocol && (str += protocol);\\n\\n    // TODO userinfo\\n\\n    host && (str += `//${host}`);\\n    str += pathname || '/';\\n    search && (str += search);\\n    hash && (str += hash);\\n\\n    return str;\\n}\\n\\n/**\\n * Attempts to return a {@code String} representation of a specific\\n * {@code Object} which is supposed to represent a URL. Obviously, if a\\n * {@code String} is specified, it is returned. If a {@code URL} is specified,\\n * its {@code URL#href} is returned. Additionally, an {@code Object} similar to\\n * the one accepted by the constructor of Web's ExternalAPI is supported on both\\n * mobile/React Native and Web/React.\\n *\\n * @param {Object|string} obj - The URL to return a {@code String}\\n * representation of.\\n * @returns {string} - A {@code String} representation of the specified\\n * {@code obj} which is supposed to represent a URL.\\n */\\nexport function toURLString(obj: ?(Object | string)): ?string {\\n    let str;\\n\\n    switch (typeof obj) {\\n    case 'object':\\n        if (obj) {\\n            if (obj instanceof URL) {\\n                str = obj.href;\\n            } else {\\n                str = urlObjectToString(obj);\\n            }\\n        }\\n        break;\\n\\n    case 'string':\\n        str = String(obj);\\n        break;\\n    }\\n\\n    return str;\\n}\\n\\n/**\\n * Attempts to return a {@code String} representation of a specific\\n * {@code Object} similar to the one accepted by the constructor\\n * of Web's ExternalAPI.\\n *\\n * @param {Object} o - The URL to return a {@code String} representation of.\\n * @returns {string} - A {@code String} representation of the specified\\n * {@code Object}.\\n */\\nexport function urlObjectToString(o: Object): ?string {\\n    const url = parseStandardURIString(_fixURIStringScheme(o.url || ''));\\n\\n    // protocol\\n    if (!url.protocol) {\\n        let protocol: ?string = o.protocol || o.scheme;\\n\\n        if (protocol) {\\n            // Protocol is supposed to be the scheme and the final ':'. Anyway,\\n            // do not make a fuss if the final ':' is not there.\\n            protocol.endsWith(':') || (protocol += ':');\\n            url.protocol = protocol;\\n        }\\n    }\\n\\n    // authority & pathname\\n    let { pathname } = url;\\n\\n    if (!url.host) {\\n        // Web's ExternalAPI domain\\n        //\\n        // It may be host/hostname and pathname with the latter denoting the\\n        // tenant.\\n        const domain: ?string = o.domain || o.host || o.hostname;\\n\\n        if (domain) {\\n            const { host, hostname, pathname: contextRoot, port }\\n                = parseStandardURIString(\\n\\n                    // XXX The value of domain in supposed to be host/hostname\\n                    // and, optionally, pathname. Make sure it is not taken for\\n                    // a pathname only.\\n                    _fixURIStringScheme(`${APP_LINK_SCHEME}//${domain}`));\\n\\n            // authority\\n            if (host) {\\n                url.host = host;\\n                url.hostname = hostname;\\n                url.port = port;\\n            }\\n\\n            // pathname\\n            pathname === '/' && contextRoot !== '/' && (pathname = contextRoot);\\n        }\\n    }\\n\\n    // pathname\\n\\n    // Web's ExternalAPI roomName\\n    const room = o.roomName || o.room;\\n\\n    if (room\\n            && (url.pathname.endsWith('/')\\n                || !url.pathname.endsWith(`/${room}`))) {\\n        pathname.endsWith('/') || (pathname += '/');\\n        pathname += room;\\n    }\\n\\n    url.pathname = pathname;\\n\\n    // query/search\\n\\n    // Web's ExternalAPI jwt\\n    const { jwt } = o;\\n\\n    if (jwt) {\\n        let { search } = url;\\n\\n        if (search.indexOf('?jwt=') === -1 && search.indexOf('&jwt=') === -1) {\\n            search.startsWith('?') || (search = `?${search}`);\\n            search.length === 1 || (search += '&');\\n            search += `jwt=${jwt}`;\\n\\n            url.search = search;\\n        }\\n    }\\n\\n    // fragment/hash\\n\\n    let { hash } = url;\\n\\n    for (const configName of [ 'config', 'interfaceConfig' ]) {\\n        const urlParamsArray\\n            = _objectToURLParamsArray(\\n                o[`${configName}Overwrite`]\\n                    || o[configName]\\n                    || o[`${configName}Override`]);\\n\\n        if (urlParamsArray.length) {\\n            let urlParamsString\\n                = `${configName}.${urlParamsArray.join(`&${configName}.`)}`;\\n\\n            if (hash.length) {\\n                urlParamsString = `&${urlParamsString}`;\\n            } else {\\n                hash = '#';\\n            }\\n            hash += urlParamsString;\\n        }\\n    }\\n\\n    url.hash = hash;\\n\\n    return url.toString() || undefined;\\n}\\n\",\"/* Copyright @ 2016 Atlassian Pty Ltd\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\nvar Logger = require('./Logger.js');\\n\\n/**\\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\\n * and thus can be added as global transport in order to capture all the logs.\\n *\\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\\n * a message and stores them in a queue in order to batch log entries. There are\\n * time and size limit constraints which determine how often batch entries are\\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\\n * will use the <tt>logStorage</tt> object given as an argument to save\\n * the batch log entry.\\n *\\n * @param {Object} logStorage an object which allows to store the logs collected\\n * @param {function(string|object[])} logStorage.storeLogs a method called when\\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\\n * item is an object it means that it's an aggregated message. That is a message\\n * which is the same as the previous one and it's representation has\\n * the following format:\\n * {\\n *   {string} text: 'the text of some duplicated message'\\n *   {number} count: 3 // how many times the message appeared in a row\\n * }\\n * If a message \\\"B\\\" after an aggregated message \\\"A\\\" is different, then it breaks\\n * the sequence of \\\"A\\\". Which means that even if the next message \\\"C\\\" is\\n * the same as \\\"A\\\" it will start a new aggregated message \\\"C\\\".\\n * @param {function()} logStorage.isReady a method which should return\\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\\n * time storage is not ready log batches will be cached and stored on the next\\n * occasion (flush or interval timeout).\\n *\\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\\n * @param {number} options.maxEntryLength the size limit for a single log entry\\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\\n * storage becomes ready. Note that the \\\"is ready\\\" condition is checked every\\n * <tt>options.storeInterval</tt> milliseconds.\\n * @param {number} options.storeInterval how often the logs should be stored in\\n * case <tt>maxEntryLength</tt> was not exceeded.\\n * @param {boolean} options.stringifyObjects indicates whether or not object\\n * arguments should be \\\"stringified\\\" with <tt>JSON.stringify</tt> when a log\\n * message is composed. Note that objects logged on the error log level are\\n * always stringified.\\n *\\n * @constructor\\n */\\nfunction LogCollector(logStorage, options) {\\n    this.logStorage = logStorage;\\n    this.stringifyObjects\\n        = options && options.stringifyObjects\\n            ? options.stringifyObjects : false;\\n    this.storeInterval\\n        = options && options.storeInterval\\n            ? options.storeInterval: 30000;\\n    this.maxEntryLength\\n        = options && options.maxEntryLength\\n            ? options.maxEntryLength : 10000;\\n    // Bind the log method for each level to the corresponding method name\\n    // in order to implement \\\"global log transport\\\" object.\\n    Object.keys(Logger.levels).forEach(\\n    function (logLevel) {\\n        var methodName = Logger.levels[logLevel];\\n        this[methodName] = function (logLevel) {\\n            this._log.apply(this, arguments);\\n        }.bind(this, logLevel);\\n    }.bind(this));\\n    /**\\n     * The ID of store logs interval if one is currently scheduled or\\n     * <tt>null</tt> otherwise.\\n     * @type {number|null}\\n     */\\n    this.storeLogsIntervalID = null;\\n    /**\\n     * The log messages that are to be batched into log entry when\\n     * {@link LogCollector._flush} method is called.\\n     * @type {string[]}\\n     */\\n    this.queue = [];\\n    /**\\n     * The total length of all messages currently stored in the {@link queue}.\\n     * @type {number}\\n     */\\n    this.totalLen = 0;\\n    /**\\n     * An array used to temporarily store log batches, before the storage gets\\n     * ready.\\n     * @type {string[]}\\n     */\\n    this.outputCache = [];\\n}\\n\\n/**\\n * Method called inside of {@link formatLogMessage} in order to covert an\\n * <tt>Object</tt> argument to string. The conversion will happen when either\\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\\n * returns \\\"[object with circular refs?]\\\" instead of an object if it fails.\\n *\\n * @param {object} someObject the <tt>object</tt> to be stringified.\\n *\\n * @return {string} the result of <tt>JSON.stringify</tt> or\\n * \\\"[object with circular refs?]\\\" if any error occurs during \\\"stringification\\\".\\n *\\n * @protected\\n */\\nLogCollector.prototype.stringify = function (someObject) {\\n    try {\\n        return JSON.stringify(someObject);\\n    } catch (error) {\\n        return \\\"[object with circular refs?]\\\";\\n    }\\n};\\n\\n/**\\n * Formats log entry for the given logging level and arguments passed to the\\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\\n * arguments have to be captured using JS built-in 'arguments' variable.\\n *\\n * @param {Logger.levels} logLevel provides the logging level of the message to\\n * be logged.\\n *\\n * @return {string|null} a non-empty string representation of the log entry\\n * crafted from the log arguments. If the return value is <tt>null</tt> then\\n * the message wil be discarded by this <tt>LogCollector</tt>.\\n *\\n * @protected\\n */\\nLogCollector.prototype.formatLogMessage\\n= function (logLevel/*, arg1, arg2, arg3... */) {\\n    var msg = '';\\n    for (var i = 1, len = arguments.length; i < len; i++) {\\n        var arg = arguments[i];\\n        // objects logged on error level are always converted to JSON\\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\\n            && typeof arg === 'object') {\\n            arg = this.stringify(arg);\\n        }\\n        msg += arg;\\n        if (i != len - 1) {\\n            msg += ' ';\\n        }\\n    }\\n    return msg.length ? msg : null;\\n};\\n\\n/**\\n * The log method bound to each of the logging levels in order to implement\\n * \\\"global log transport\\\" object.\\n *\\n * @private\\n */\\nLogCollector.prototype._log = function() {\\n\\n    // var logLevel = arguments[0]; first argument is the log level\\n    var msg = this.formatLogMessage.apply(this, arguments);\\n    if (msg) {\\n        // The same as the previous message aggregation logic\\n        var prevMessage\\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\\n        // NOTE that typeof undefined is 'undefined'\\n        var prevMessageText\\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\\n        // Is it the same as the previous one ?\\n        if (prevMessageText == msg) {\\n            if (typeof prevMessage === 'object') {\\n                prevMessage.count += 1;\\n            } else {\\n                this.queue[this.queue.length-1] = {\\n                    text: msg,\\n                    count: 2\\n                }\\n            }\\n        } else {\\n            this.queue.push(msg);\\n            this.totalLen += msg.length;\\n        }\\n    }\\n\\n    if (this.totalLen >= this.maxEntryLength) {\\n        this._flush(true /* force */, true /* reschedule */);\\n    }\\n};\\n\\n/**\\n * Starts periodical \\\"store logs\\\" task which will be triggered at the interval\\n * specified in the constructor options.\\n */\\nLogCollector.prototype.start = function () {\\n    this._reschedulePublishInterval();\\n};\\n\\n/**\\n * Reschedules the periodical \\\"store logs\\\" task which will store the next batch\\n * log entry in the storage.\\n * @private\\n */\\nLogCollector.prototype._reschedulePublishInterval = function () {\\n    if (this.storeLogsIntervalID) {\\n        window.clearTimeout(this.storeLogsIntervalID);\\n        this.storeLogsIntervalID = null;\\n    }\\n    // It's actually a timeout, because it is rescheduled on every flush\\n    this.storeLogsIntervalID\\n        = window.setTimeout(\\n            this._flush.bind(\\n                this, false /* do not force */, true /* reschedule */),\\n            this.storeInterval);\\n};\\n\\n/**\\n * Call this method to flush the log entry buffer and store it in the log\\n * storage immediately (given that the storage is ready).\\n */\\nLogCollector.prototype.flush = function() {\\n    this._flush(\\n        false /* do not force, as it will not be stored anyway */,\\n        true /* reschedule next update */ )\\n};\\n\\n/**\\n * Stores the next batch log entry in the log storage.\\n * @param {boolean} force enforce current logs batch to be stored or cached if\\n * there is anything to be logged, but the storage is not ready yet. One of\\n * legitimate reasons to force is when the logs length exceeds size limit which\\n * could result in truncation.\\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\\n * task cycle.\\n * @private\\n */\\nLogCollector.prototype._flush = function(force, reschedule) {\\n    // Publish only if there's anything to be logged\\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\\n        //FIXME avoid truncating\\n        // right now we don't care if the message size is \\\"slightly\\\" exceeded\\n        if (this.logStorage.isReady()) {\\n            // Sends all cached logs\\n            if (this.outputCache.length) {\\n                this.outputCache.forEach(\\n                    function (cachedQueue) {\\n                        this.logStorage.storeLogs(cachedQueue);\\n                    }.bind(this)\\n                );\\n                // Clear the cache\\n                this.outputCache = [];\\n            }\\n            // Send current batch\\n            this.logStorage.storeLogs(this.queue);\\n        } else {\\n            this.outputCache.push(this.queue);\\n        }\\n\\n        this.queue = [];\\n        this.totalLen = 0;\\n    }\\n\\n    if (reschedule) {\\n        this._reschedulePublishInterval();\\n    }\\n};\\n\\n/**\\n * Stops the periodical \\\"store logs\\\" task and immediately stores any pending\\n * log entries as a batch.\\n */\\nLogCollector.prototype.stop = function() {\\n    // Flush and stop publishing logs\\n    this._flush(false /* do not force */, false /* do not reschedule */);\\n};\\n\\nmodule.exports = LogCollector;\\n\",\"/* Copyright @ 2015 Atlassian Pty Ltd\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\nvar Logger = require(\\\"./Logger\\\");\\nvar LogCollector = require(\\\"./LogCollector\\\");\\n\\n/**\\n * Definition of the log method\\n * @name log_method\\n * @function\\n * @param {...*} log_args the arguments to be logged\\n */\\n/**\\n * The logger's transport type definition.\\n *\\n * @typedef {object} LoggerTransport\\n *\\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\\n */\\n\\n/**\\n * Map with the created loggers with ID.\\n */\\nvar idLoggers = {};\\n\\n/**\\n * Array with the loggers without id.\\n */\\nvar loggers = [];\\n\\n/**\\n * Log level for the lbrary.\\n */\\nvar curLevel = Logger.levels.TRACE;\\n\\n\\nmodule.exports = {\\n    /**\\n     * Adds given {@link LoggerTransport} instance to the list of global\\n     * transports which means that it'll be used by all {@link Logger}s\\n     * @param {LoggerTransport} transport\\n     */\\n    addGlobalTransport: function(transport) {\\n        Logger.addGlobalTransport(transport);\\n    },\\n    /**\\n     * Removes given {@link LoggerTransport} instance from the list of global\\n     * transports\\n     * @param {LoggerTransport} transport\\n     */\\n    removeGlobalTransport: function(transport) {\\n        Logger.removeGlobalTransport(transport);\\n    },\\n    /**\\n     * Creates new logger.\\n     * @arguments the same as Logger constructor\\n     */\\n    getLogger: function(id, transports, format) {\\n        var logger = new Logger(curLevel, id, transports, format);\\n        if(id) {\\n            idLoggers[id] = idLoggers[id] || [];\\n            idLoggers[id].push(logger);\\n        } else {\\n            loggers.push(logger);\\n        }\\n        return logger;\\n    },\\n    /**\\n     * Changes the log level for the existing loggers by id.\\n     * @param level the new log level.\\n     * @param id if specified the level will be changed only for loggers with the\\n     * same id. Otherwise the operation will affect all loggers that don't\\n     * have id.\\n     */\\n    setLogLevelById: function(level, id) {\\n        var l = id? (idLoggers[id] || []) : loggers;\\n        for(var i = 0; i < l.length; i++) {\\n            l[i].setLevel(level);\\n        }\\n    },\\n    /**\\n     * Changes the log level for all existing loggers.\\n     * @param level the new log level.\\n     */\\n    setLogLevel: function (level) {\\n        curLevel = level;\\n        var i = 0;\\n        for(; i < loggers.length; i++) {\\n            loggers[i].setLevel(level);\\n        }\\n\\n        for(var id in idLoggers) {\\n            var l = idLoggers[id] || [];\\n            for(i = 0; i < l.length; i++) {\\n                l[i].setLevel(level);\\n            }\\n        }\\n    },\\n    /**\\n     * The supported log levels.\\n     */\\n    levels: Logger.levels,\\n    /**\\n     * Exports the <tt>LogCollector</tt>.\\n     */\\n    LogCollector: LogCollector\\n};\\n\",\"// @flow\\n\\ndeclare var JitsiMeetJS: Object;\\n\\n/**\\n * Loads a script from a specific URL. The script will be interpreted upon load.\\n *\\n * @param {string} url - The url to be loaded.\\n * @returns {Promise} Resolved with no arguments when the script is loaded and\\n * rejected with the error from JitsiMeetJS.ScriptUtil.loadScript method.\\n */\\nexport function loadScript(url: string): Promise<void> {\\n    return new Promise((resolve, reject) =>\\n        JitsiMeetJS.util.ScriptUtil.loadScript(\\n            url,\\n            /* async */ true,\\n            /* prepend */ false,\\n            /* relativeURL */ false,\\n            /* loadCallback */ resolve,\\n            /* errorCallback */ reject));\\n}\\n\",\"// @flow\\n\\n/**\\n * Alphanumeric characters.\\n * @const\\n */\\nconst ALPHANUM\\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\\n\\n/**\\n * Hexadecimal digit characters.\\n * @const\\n */\\nconst HEX_DIGITS = '0123456789abcdef';\\n\\n/**\\n * Generate a string with random alphanumeric characters with a specific length.\\n *\\n * @param {number} length - The length of the string to return.\\n * @returns {string} A string of random alphanumeric characters with the\\n * specified length.\\n */\\nexport function randomAlphanumString(length: number) {\\n    return _randomString(length, ALPHANUM);\\n}\\n\\n/**\\n * Get random element of array or string.\\n *\\n * @param {Array|string} arr - Source.\\n * @returns {Array|string} Array element or string character.\\n */\\nexport function randomElement(arr: Array<*> | string) {\\n    return arr[randomInt(0, arr.length - 1)];\\n}\\n\\n/**\\n * Returns a random hex digit.\\n *\\n * @returns {Array|string}\\n */\\nexport function randomHexDigit() {\\n    return randomElement(HEX_DIGITS);\\n}\\n\\n/**\\n * Generates a string of random hexadecimal digits with a specific length.\\n *\\n * @param {number} length - The length of the string to return.\\n * @returns {string} A string of random hexadecimal digits with the specified\\n * length.\\n */\\nexport function randomHexString(length: number) {\\n    return _randomString(length, HEX_DIGITS);\\n}\\n\\n/**\\n * Generates random int within the range [min, max].\\n *\\n * @param {number} min - The minimum value for the generated number.\\n * @param {number} max - The maximum value for the generated number.\\n * @returns {number} Random int number.\\n */\\nexport function randomInt(min: number, max: number) {\\n    return Math.floor(Math.random() * (max - min + 1)) + min;\\n}\\n\\n/**\\n * Generates a string of random characters with a specific length.\\n *\\n * @param {number} length - The length of the string to return.\\n * @param {string} characters - The characters from which the returned string is\\n * to be constructed.\\n * @private\\n * @returns {string} A string of random characters with the specified length.\\n */\\nfunction _randomString(length, characters) {\\n    let result = '';\\n\\n    for (let i = 0; i < length; ++i) {\\n        result += randomElement(characters);\\n    }\\n\\n    return result;\\n}\\n\",\"export * from './helpers';\\nexport * from './httpUtils';\\nexport * from './loadScript';\\nexport * from './randomUtil';\\nexport * from './uri';\\n\",\"/**\\n * Abstract implementation of analytics handler\\n */\\nexport default class AbstractHandler {\\n    /**\\n     * Creates new instance.\\n     */\\n    constructor() {\\n        this._enabled = false;\\n        this._ignoredEvents\\n            = [ 'e2e_rtt', 'rtp.stats', 'rtt.by.region', 'available.device',\\n                'stream.switch.delay', 'ice.state.changed', 'ice.duration' ];\\n    }\\n\\n    /**\\n     * Extracts a name for the event from the event properties.\\n     *\\n     * @param {Object} event - The analytics event.\\n     * @returns {string} - The extracted name.\\n     */\\n    _extractName(event) {\\n        // Page events have a single 'name' field.\\n        if (event.type === 'page') {\\n            return event.name;\\n        }\\n\\n        const {\\n            action,\\n            actionSubject,\\n            source\\n        } = event;\\n\\n        // All events have action, actionSubject, and source fields. All\\n        // three fields are required, and often jitsi-meet and\\n        // lib-jitsi-meet use the same value when separate values are not\\n        // necessary (i.e. event.action == event.actionSubject).\\n        // Here we concatenate these three fields, but avoid adding the same\\n        // value twice, because it would only make the event's name harder\\n        // to read.\\n        let name = action;\\n\\n        if (actionSubject && actionSubject !== action) {\\n            name = `${actionSubject}.${action}`;\\n        }\\n        if (source && source !== action) {\\n            name = `${source}.${name}`;\\n        }\\n\\n        return name;\\n    }\\n\\n    /**\\n     * Checks if an event should be ignored or not.\\n     *\\n     * @param {Object} event - The event.\\n     * @returns {boolean}\\n     */\\n    _shouldIgnore(event) {\\n        if (!event || !this._enabled) {\\n            return true;\\n        }\\n\\n        // Temporary removing some of the events that are too noisy.\\n        return this._ignoredEvents.indexOf(event.action) !== -1;\\n    }\\n}\\n\",\"/* global ga */\\n\\nimport { getJitsiMeetGlobalNS } from '../../base/util';\\n\\nimport AbstractHandler from './AbstractHandler';\\n\\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\\n\\n/**\\n * Analytics handler for Google Analytics.\\n */\\nclass GoogleAnalyticsHandler extends AbstractHandler {\\n\\n    /**\\n     * Creates new instance of the GA analytics handler.\\n     *\\n     * @param {Object} options -\\n     * @param {string} options.googleAnalyticsTrackingId - The GA track id\\n     * required by the GA API.\\n     */\\n    constructor(options) {\\n        super();\\n\\n        this._userProperties = {};\\n\\n        if (!options.googleAnalyticsTrackingId) {\\n            logger.warn(\\n                'Failed to initialize Google Analytics handler, no tracking ID'\\n            );\\n\\n            return;\\n        }\\n\\n        this._enabled = true;\\n        this._initGoogleAnalytics(options);\\n    }\\n\\n    /**\\n     * Initializes the ga object.\\n     *\\n     * @param {Object} options -\\n     * @param {string} options.googleAnalyticsTrackingId - The GA track id\\n     * required by the GA API.\\n     * @returns {void}\\n     */\\n    _initGoogleAnalytics(options) {\\n        /**\\n         * TODO: Keep this local, there's no need to add it to window.\\n         */\\n        /* eslint-disable */\\n        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\\n            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\\n        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\\n        /* eslint-enable */\\n        ga('create', options.googleAnalyticsTrackingId, 'auto');\\n        ga('send', 'pageview');\\n    }\\n\\n    /**\\n     * Extracts the integer to use for a Google Analytics event's value field\\n     * from a lib-jitsi-meet analytics event.\\n     *\\n     * @param {Object} event - The lib-jitsi-meet analytics event.\\n     * @returns {number} - The integer to use for the 'value' of a Google\\n     * analytics event, or NaN if the lib-jitsi-meet event doesn't contain a\\n     * suitable value.\\n     * @private\\n     */\\n    _extractValue(event) {\\n        let value = event && event.attributes && event.attributes.value;\\n\\n        // Try to extract an integer from the \\\"value\\\" attribute.\\n        value = Math.round(parseFloat(value));\\n\\n        return value;\\n    }\\n\\n    /**\\n     * Extracts the string to use for a Google Analytics event's label field\\n     * from a lib-jitsi-meet analytics event.\\n     *\\n     * @param {Object} event - The lib-jitsi-meet analytics event.\\n     * @returns {string} - The string to use for the 'label' of a Google\\n     * analytics event.\\n     * @private\\n     */\\n    _extractLabel(event) {\\n        const { attributes = {} } = event;\\n        const labelsArray\\n            = Object.keys(attributes).map(key => `${key}=${attributes[key]}`);\\n\\n        labelsArray.push(this._userPropertiesString);\\n\\n        return labelsArray.join('&');\\n    }\\n\\n    /**\\n     * Sets the permanent properties for the current session.\\n     *\\n     * @param {Object} userProps - The permanent portperties.\\n     * @returns {void}\\n     */\\n    setUserProperties(userProps = {}) {\\n        if (!this._enabled) {\\n            return;\\n        }\\n\\n        // The label field is limited to 500B. We will concatenate all\\n        // attributes of the event, except the user agent because it may be\\n        // lengthy and is probably included from elsewhere.\\n        const filter = [ 'user_agent', 'callstats_name' ];\\n\\n        this._userPropertiesString\\n            = Object.keys(userProps)\\n                .filter(key => filter.indexOf(key) === -1)\\n                .map(key => `permanent_${key}=${userProps[key]}`)\\n                .join('&');\\n    }\\n\\n    /**\\n     * This is the entry point of the API. The function sends an event to\\n     * google analytics. The format of the event is described in\\n     * analyticsAdapter in lib-jitsi-meet.\\n     *\\n     * @param {Object} event - The event in the format specified by\\n     * lib-jitsi-meet.\\n     * @returns {void}\\n     */\\n    sendEvent(event) {\\n        if (this._shouldIgnore(event)) {\\n            return;\\n        }\\n\\n        const gaEvent = {\\n            'eventCategory': 'jitsi-meet',\\n            'eventAction': this._extractName(event),\\n            'eventLabel': this._extractLabel(event)\\n        };\\n        const value = this._extractValue(event);\\n\\n        if (!isNaN(value)) {\\n            gaEvent.eventValue = value;\\n        }\\n\\n        ga('send', 'event', gaEvent);\\n    }\\n\\n}\\n\\nconst globalNS = getJitsiMeetGlobalNS();\\n\\nglobalNS.analyticsHandlers = globalNS.analyticsHandlers || [];\\nglobalNS.analyticsHandlers.push(GoogleAnalyticsHandler);\\n\"]}","code":"!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"/libs/\",n(n.s=889)}({119:function(t,e){var n={trace:0,debug:1,info:2,log:3,warn:4,error:5};i.consoleTransport=console;var r=[i.consoleTransport];function o(){var t=arguments[0],e=arguments[1],o=Array.prototype.slice.call(arguments,2);if(!(n[e]<t.level))for(var i=function(){var t={methodName:\"\",fileLocation:\"\",line:null,column:null},e=new Error,n=e.stack?e.stack.split(\"\\n\"):[];if(!n||n.length<1)return t;var r=null;return n[3]&&(r=n[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/)),!r||r.length<=4?(0===n[2].indexOf(\"log@\")?t.methodName=n[3].substr(0,n[3].indexOf(\"@\")):t.methodName=n[2].substr(0,n[2].indexOf(\"@\")),t):(t.methodName=r[1],t.fileLocation=r[2],t.line=r[3],t.column=r[4],t)}(),a=r.concat(t.transports),s=0;s<a.length;s++){var u=a[s],c=u[e];c&&\"function\"==typeof c&&c.bind(u,t.id?\"[\"+t.id+\"]\":\"\",\"<\"+i.methodName+\">: \").apply(u,o)}}function i(t,e,r,i){this.id=e,this.format=i,this.transports=r,this.transports||(this.transports=[]),this.level=n[t];for(var a=Object.keys(n),s=0;s<a.length;s++)this[a[s]]=o.bind(null,this,a[s])}i.addGlobalTransport=function(t){-1===r.indexOf(t)&&r.push(t)},i.removeGlobalTransport=function(t){var e=r.indexOf(t);-1!==e&&r.splice(e,1)},i.prototype.setLevel=function(t){this.level=n[t]},t.exports=i,i.levels={TRACE:\"trace\",DEBUG:\"debug\",INFO:\"info\",LOG:\"log\",WARN:\"warn\",ERROR:\"error\"}},147:function(t,e,n){\"use strict\";(function(t){n.d(e,\"b\",function(){return o}),n.d(e,\"a\",function(){return i}),n.d(e,\"c\",function(){return a});var r=n(27).getLogger(t);function o(){return window.JitsiMeetJS||(window.JitsiMeetJS={}),window.JitsiMeetJS.app||(window.JitsiMeetJS.app={}),window.JitsiMeetJS.app}function i(t,e){var n=Object(t);for(var r in e)if(e.hasOwnProperty(r)){var o=e[r];void 0!==o&&(n[r]=o)}return n}function a(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\";r.error(e,t),window.onerror&&window.onerror(e,null,null,null,t)}}).call(this,\"react/features/base/util/helpers.js\")},148:function(t,e,n){\"use strict\";(function(t){n.d(e,\"a\",function(){return o});var r=n(27).getLogger(t);function o(t){return fetch(t).then(function(t){var e=t.json();return t.ok?e:e.then(function(t){return Promise.reject(t)})}).catch(function(e){return r.error(\"Error performing get:\",t,e),Promise.reject(e)})}}).call(this,\"react/features/base/util/httpUtils.js\")},149:function(t,e,n){\"use strict\";(function(t){function r(t){return(r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t})(t)}n.d(e,\"a\",function(){return i}),n.d(e,\"b\",function(){return c}),n.d(e,\"c\",function(){return f}),n.d(e,\"d\",function(){return p}),n.d(e,\"e\",function(){return g}),n.d(e,\"f\",function(){return v});var o=n(27).getLogger(t),i=\"org.jitsi.meet:\",a=\"[\\\\:\\\\?#\\\\[\\\\]@!$&'()*+,;=></\\\"]\",s=\"(//[^/?#]+)\",u=\"([^?#]*)\",c=\"([a-z][a-z0-9\\\\.\\\\+-]*:)\";function l(t){var e=new RegExp(\"^\".concat(c,\"+\"),\"gi\"),n=e.exec(t);if(n){var r=n[n.length-1].toLowerCase();\"http:\"!==r&&\"https:\"!==r&&(r=\"https:\"),(t=t.substring(e.lastIndex)).startsWith(\"//\")&&(t=r+t)}return t}function f(t){var e=t.pathname,n=e.lastIndexOf(\"/\");return-1===n?\"/\":e.substring(0,n+1)}function h(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=[];for(var n in t)try{e.push(\"\".concat(n,\"=\").concat(encodeURIComponent(JSON.stringify(t[n]))))}catch(t){o.warn(\"Error encoding \".concat(n,\": \").concat(t))}return e}function p(t){var e,n,r,o={toString:d};if(t=t.replace(/\\s/g,\"\"),(n=(e=new RegExp(\"^\".concat(c),\"gi\")).exec(t))&&(o.protocol=n[1].toLowerCase(),t=t.substring(e.lastIndex)),n=(e=new RegExp(\"^\".concat(s),\"gi\")).exec(t)){var i=n[1].substring(2);t=t.substring(e.lastIndex);var a=i.indexOf(\"@\");-1!==a&&(i=i.substring(a+1)),o.host=i;var l=i.lastIndexOf(\":\");-1!==l&&(o.port=i.substring(l+1),i=i.substring(0,l)),o.hostname=i}if((n=(e=new RegExp(\"^\".concat(u),\"gi\")).exec(t))&&(r=n[1],t=t.substring(e.lastIndex)),r?r.startsWith(\"/\")||(r=\"/\".concat(r)):r=\"/\",o.pathname=r,t.startsWith(\"?\")){var f=t.indexOf(\"#\",1);-1===f&&(f=t.length),o.search=t.substring(0,f),t=t.substring(f)}else o.search=\"\";return o.hash=t.startsWith(\"#\")?t:\"\",o}function g(t){if(\"string\"==typeof t){var e=p(l(t));e.contextRoot=f(e);var n=e.pathname,r=n.lastIndexOf(\"/\"),o=n.substring(r+1)||void 0;if(o){var i=function(t){return t?t.replace(new RegExp(a,\"g\"),\"\"):t}(o);i!==o&&(o=i,e.pathname=n.substring(0,r+1)+(o||\"\"))}return e.room=o,e}}function d(t){var e=t||this,n=e.hash,r=e.host,o=e.pathname,i=e.protocol,a=e.search,s=\"\";return i&&(s+=i),r&&(s+=\"//\".concat(r)),s+=o||\"/\",a&&(s+=a),n&&(s+=n),s}function v(t){var e;switch(r(t)){case\"object\":t&&(e=t instanceof URL?t.href:function(t){var e=p(l(t.url||\"\"));if(!e.protocol){var n=t.protocol||t.scheme;n&&(n.endsWith(\":\")||(n+=\":\"),e.protocol=n)}var r=e.pathname;if(!e.host){var o=t.domain||t.host||t.hostname;if(o){var a=p(l(\"\".concat(i,\"//\").concat(o))),s=a.host,u=a.hostname,c=a.pathname,f=a.port;s&&(e.host=s,e.hostname=u,e.port=f),\"/\"===r&&\"/\"!==c&&(r=c)}}var g=t.roomName||t.room;!g||!e.pathname.endsWith(\"/\")&&e.pathname.endsWith(\"/\".concat(g))||(r.endsWith(\"/\")||(r+=\"/\"),r+=g);e.pathname=r;var d=t.jwt;if(d){var v=e.search;-1===v.indexOf(\"?jwt=\")&&-1===v.indexOf(\"&jwt=\")&&(v.startsWith(\"?\")||(v=\"?\".concat(v)),1===v.length||(v+=\"&\"),v+=\"jwt=\".concat(d),e.search=v)}for(var y=e.hash,b=[\"config\",\"interfaceConfig\"],m=0;m<b.length;m++){var w=b[m],O=h(t[\"\".concat(w,\"Overwrite\")]||t[w]||t[\"\".concat(w,\"Override\")]);if(O.length){var j=\"\".concat(w,\".\").concat(O.join(\"&\".concat(w,\".\")));y.length?j=\"&\".concat(j):y=\"#\",y+=j}}return e.hash=y,e.toString()||void 0}(t));break;case\"string\":e=String(t)}return e}}).call(this,\"react/features/base/util/uri.js\")},164:function(t,e,n){var r=n(119);function o(t,e){this.logStorage=t,this.stringifyObjects=!(!e||!e.stringifyObjects)&&e.stringifyObjects,this.storeInterval=e&&e.storeInterval?e.storeInterval:3e4,this.maxEntryLength=e&&e.maxEntryLength?e.maxEntryLength:1e4,Object.keys(r.levels).forEach(function(t){this[r.levels[t]]=function(t){this._log.apply(this,arguments)}.bind(this,t)}.bind(this)),this.storeLogsIntervalID=null,this.queue=[],this.totalLen=0,this.outputCache=[]}o.prototype.stringify=function(t){try{return JSON.stringify(t)}catch(t){return\"[object with circular refs?]\"}},o.prototype.formatLogMessage=function(t){for(var e=\"\",n=1,o=arguments.length;n<o;n++){var i=arguments[n];!this.stringifyObjects&&t!==r.levels.ERROR||\"object\"!=typeof i||(i=this.stringify(i)),e+=i,n!=o-1&&(e+=\" \")}return e.length?e:null},o.prototype._log=function(){var t=this.formatLogMessage.apply(this,arguments);if(t){var e=this.queue.length?this.queue[this.queue.length-1]:void 0;(\"object\"==typeof e?e.text:e)==t?\"object\"==typeof e?e.count+=1:this.queue[this.queue.length-1]={text:t,count:2}:(this.queue.push(t),this.totalLen+=t.length)}this.totalLen>=this.maxEntryLength&&this._flush(!0,!0)},o.prototype.start=function(){this._reschedulePublishInterval()},o.prototype._reschedulePublishInterval=function(){this.storeLogsIntervalID&&(window.clearTimeout(this.storeLogsIntervalID),this.storeLogsIntervalID=null),this.storeLogsIntervalID=window.setTimeout(this._flush.bind(this,!1,!0),this.storeInterval)},o.prototype.flush=function(){this._flush(!1,!0)},o.prototype._flush=function(t,e){this.totalLen>0&&(this.logStorage.isReady()||t)&&(this.logStorage.isReady()?(this.outputCache.length&&(this.outputCache.forEach(function(t){this.logStorage.storeLogs(t)}.bind(this)),this.outputCache=[]),this.logStorage.storeLogs(this.queue)):this.outputCache.push(this.queue),this.queue=[],this.totalLen=0),e&&this._reschedulePublishInterval()},o.prototype.stop=function(){this._flush(!1,!1)},t.exports=o},27:function(t,e,n){var r=n(119),o=n(164),i={},a=[],s=r.levels.TRACE;t.exports={addGlobalTransport:function(t){r.addGlobalTransport(t)},removeGlobalTransport:function(t){r.removeGlobalTransport(t)},getLogger:function(t,e,n){var o=new r(s,t,e,n);return t?(i[t]=i[t]||[],i[t].push(o)):a.push(o),o},setLogLevelById:function(t,e){for(var n=e?i[e]||[]:a,r=0;r<n.length;r++)n[r].setLevel(t)},setLogLevel:function(t){s=t;for(var e=0;e<a.length;e++)a[e].setLevel(t);for(var n in i){var r=i[n]||[];for(e=0;e<r.length;e++)r[e].setLevel(t)}},levels:r.levels,LogCollector:o}},31:function(t,e,n){\"use strict\";var r=n(147),o=n(148);function i(t){return new Promise(function(e,n){return JitsiMeetJS.util.ScriptUtil.loadScript(t,!0,!1,!1,e,n)})}var a=\"0123456789abcdef\";function s(t){return t[c(0,t.length-1)]}function u(t){return l(t,a)}function c(t,e){return Math.floor(Math.random()*(e-t+1))+t}function l(t,e){for(var n=\"\",r=0;r<t;++r)n+=s(e);return n}var f=n(149);n.d(e,\"e\",function(){return r.b}),n.d(e,\"c\",function(){return r.a}),n.d(e,\"m\",function(){return r.c}),n.d(e,\"d\",function(){return o.a}),n.d(e,\"g\",function(){return i}),n.d(e,\"j\",function(){return s}),n.d(e,\"k\",function(){return u}),n.d(e,\"l\",function(){return c}),n.d(e,\"a\",function(){return f.a}),n.d(e,\"b\",function(){return f.b}),n.d(e,\"f\",function(){return f.c}),n.d(e,\"h\",function(){return f.d}),n.d(e,\"i\",function(){return f.e}),n.d(e,\"n\",function(){return f.f})},660:function(t,e,n){\"use strict\";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.d(e,\"a\",function(){return o});var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this._enabled=!1,this._ignoredEvents=[\"e2e_rtt\",\"rtp.stats\",\"rtt.by.region\",\"available.device\",\"stream.switch.delay\",\"ice.state.changed\",\"ice.duration\"]}var e,n,o;return e=t,(n=[{key:\"_extractName\",value:function(t){if(\"page\"===t.type)return t.name;var e=t.action,n=t.actionSubject,r=t.source,o=e;return n&&n!==e&&(o=\"\".concat(n,\".\").concat(e)),r&&r!==e&&(o=\"\".concat(r,\".\").concat(o)),o}},{key:\"_shouldIgnore\",value:function(t){return!t||!this._enabled||-1!==this._ignoredEvents.indexOf(t.action)}}])&&r(e.prototype,n),o&&r(e,o),t}()},889:function(t,e,n){\"use strict\";n.r(e),function(t){var e=n(31),r=n(660);function o(t){return(o=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t})(t)}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function a(t,e){return!e||\"object\"!==o(e)&&\"function\"!=typeof e?function(t){if(void 0===t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return t}(t):e}function s(t){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function u(t,e){return(u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var c=n(27).getLogger(t),l=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,e),(n=a(this,s(e).call(this)))._userProperties={},t.googleAnalyticsTrackingId?(n._enabled=!0,n._initGoogleAnalytics(t),n):(c.warn(\"Failed to initialize Google Analytics handler, no tracking ID\"),a(n))}var n,o,l;return function(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function\");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&u(t,e)}(e,r[\"a\"]),n=e,(o=[{key:\"_initGoogleAnalytics\",value:function(t){var e,n,r,o,i,a;e=window,n=document,r=\"script\",o=\"ga\",e.GoogleAnalyticsObject=o,e.ga=e.ga||function(){(e.ga.q=e.ga.q||[]).push(arguments)},e.ga.l=1*new Date,i=n.createElement(r),a=n.getElementsByTagName(r)[0],i.async=1,i.src=\"//www.google-analytics.com/analytics.js\",a.parentNode.insertBefore(i,a),ga(\"create\",t.googleAnalyticsTrackingId,\"auto\"),ga(\"send\",\"pageview\")}},{key:\"_extractValue\",value:function(t){var e=t&&t.attributes&&t.attributes.value;return e=Math.round(parseFloat(e))}},{key:\"_extractLabel\",value:function(t){var e=t.attributes,n=void 0===e?{}:e,r=Object.keys(n).map(function(t){return\"\".concat(t,\"=\").concat(n[t])});return r.push(this._userPropertiesString),r.join(\"&\")}},{key:\"setUserProperties\",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this._enabled){var e=[\"user_agent\",\"callstats_name\"];this._userPropertiesString=Object.keys(t).filter(function(t){return-1===e.indexOf(t)}).map(function(e){return\"permanent_\".concat(e,\"=\").concat(t[e])}).join(\"&\")}}},{key:\"sendEvent\",value:function(t){if(!this._shouldIgnore(t)){var e={eventCategory:\"jitsi-meet\",eventAction:this._extractName(t),eventLabel:this._extractLabel(t)},n=this._extractValue(t);isNaN(n)||(e.eventValue=n),ga(\"send\",\"event\",e)}}}])&&i(n.prototype,o),l&&i(n,l),e}(),f=Object(e.e)();f.analyticsHandlers=f.analyticsHandlers||[],f.analyticsHandlers.push(l)}.call(this,\"react/features/analytics/handlers/GoogleAnalyticsHandler.js\")}});","extractedComments":[]}